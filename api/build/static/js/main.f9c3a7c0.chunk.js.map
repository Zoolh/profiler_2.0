{"version":3,"sources":["http-common.js","services/QuestionService.js","services/PropositionService.js","actions/profilAction.js","constants/actionTypes.js","actions/propositionAction.js","components/Proposition.js","actions/gestionAction.js","components/Question.js","services/ProfilService.js","components/modals/profil.modal.js","services/TypeGestionServices.js","components/modals/gestion.modal.js","services/ActifServices.js","components/modals/marche.modal.js","components/modals/plusLoin.modal.js","services/ConseilServices.js","components/modals/regles.modal.js","services/SupportInvServices.js","components/modals/support.modal.js","components/Profil.js","components/Accueil.js","App.js","serviceWorker.js","reducers/profilReducer.js","reducers/gestionReducer.js","reducers/index.js","reducers/propositionReducer.js","index.js"],"names":["axios","create","baseURL","process","headers","http","get","idQuestion","params","id","setIsMinor","isMinor","type","profilPrudentAuto","isProfilPrudent","profilTraderAuto","isProfilTrader","isProfilTraderAuto","lastAnswer","dispatchToCall","valueToGive","Proposition","props","dispatch","useDispatch","useState","listePropositions","setListePropositions","useEffect","getListPropositions","PropositionDataService","then","response","data","catch","e","console","log","className","of","as","proposition","onClick","pointsProfil","pointProfil","pointsTypeGestion","pointGestion","setIndexHandler","nextQuestion","libelle","Question","initialQuestionState","listQuestion","currentQuestion","setCurrentQuestion","indexQuestion","setIndexQuestion","pourcentageBar","setPourcentageBar","answersList","useSelector","state","reversePreviousAnswer","anwserToRemove","length","Object","entries","map","key","value","pointProfilToRemove","pointGestionToRemove","progressPercent","style","width","icon","faArrowLeft","displayProfil","ModalProfil","useStyles","makeStyles","root","minWidth","marginBottom","bullet","display","margin","transform","title","fontSize","pos","temps","variation","actif_profil","conseil_profil","description","profil","setProfil","allProfils","setAllProfils","classes","getProfil","getAllProfil","ProfilDataService","ResultatProfil","backgroundColor","fontStyle","p","Card","CardContent","Typography","color","gutterBottom","variant","component","typeGestion","setTypeGestion","allTypesGestion","setAllTypesGestion","GestionDataService","ResultatGestion","g","idProfil","post","actifSelected","setActifSelected","getActifSelected","ActifsDataService","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","a","scope","ponderation","produit_actif","href","target","rel","allRegles","setAllRegles","activeOnglet","setActiveOnglet","modalShow","setModalShow","getAllRegles","getOnglet","onglet","ConseilDataService","truncate","text","substring","MydModalWithGrid","Modal","dialogClassName","aria-labelledby","Header","closeButton","Title","Body","Footer","Button","onHide","filter","regle","show","listeSupports","setListeSupports","allSupports","setAllSupports","getAllSupports","SupportDataService","listeTemp","support","s","equals","some","el","Profil","nbPointProfil","point","nbQuestionProfil","nbReponses","isProfilPrudentAuto","Number","toFixed","nbPointGestion","gestion","nbQuestionGestion","faHome","size","window","location","reload","Accueil","listQuestions","setListQuestions","setTarget","QuestionDataService","App","Boolean","hostname","match","initialState","rootReducer","combineReducers","action","slice","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.f9c3a7c0.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  \r\n  baseURL: process.env.REACT_APP_API_URL,\r\n  headers: {\r\n    \"Content-type\": \"application/json\",\r\n    'Content-Type': 'application/x-www-form-urlencoded'\r\n  }\r\n});\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/questions\");\r\n  \r\n};\r\n\r\nconst get = id => {\r\n  return http.get(`/questions/${id}`);\r\n};\r\n\r\n\r\n\r\nexport default {\r\n  getAll,\r\n  get\r\n};\r\n","import http from \"../http-common\";\r\n\r\nconst getAllByIdQuestion = idQuestion => {\r\n  return http.get(\"/propositions/getByQuestions\", {\r\n      params: {\r\n          id: idQuestion\r\n      }\r\n    });\r\n};\r\n\r\n\r\nconst get = id => {\r\n  return http.get(`/propositions/${id}`);\r\n};\r\n\r\n\r\n\r\nexport default {\r\n  getAllByIdQuestion,\r\n  get\r\n};\r\n","import * as types from \"../constants/actionTypes\";\r\n\r\n\r\nexport const incrementPointProfil = (pointProfil) => ({\r\n    type: types.ADD_POINT_PROFIL,\r\n    pointProfil : pointProfil\r\n});\r\n\r\nexport const decrementPointProfil = (pointProfilToRemove) => ({\r\n    type: types.REMOVE_POINT_PROFIL,\r\n    pointProfilToRemove : pointProfilToRemove\r\n});\r\n\r\nexport const incrementReponse = () => ({\r\n    type: types.ADD_RESPONSE_COUNT\r\n});\r\n\r\nexport const decrementReponse = () => ({\r\n    type: types.REMOVE_ONE_RESPONSE\r\n})\r\n\r\nexport const setIsMinor = (isMinor) => ({\r\n    type: types.SET_IS_MINOR,\r\n    isMinor: isMinor\r\n});\r\n\r\nexport const profilPrudentAuto = (isProfilPrudent) => ({\r\n    type: types.SET_PROFIL_PRUDENT_AUTO,\r\n    isProfilPrudent: isProfilPrudent\r\n});\r\n\r\nexport const profilTraderAuto = (isProfilTrader) => ({\r\n    type: types.SET_PROFIL_TRADER_AUTO,\r\n    isProfilTraderAuto: isProfilTrader\r\n})\r\n","export const ADD_POINT_PROFIL = 'ADD_POINT_PROFIL'\r\nexport const REMOVE_POINT_PROFIL = 'REMOVE_POINT_PROFIL'\r\nexport const ADD_RESPONSE_COUNT  = 'ADD_RESPONSE_COUNT'\r\nexport const REMOVE_ONE_RESPONSE = 'REMOVE_ONE_RESPONSE'\r\n\r\nexport const SET_LAST_ANSWER = 'SET_LAST_ANSWER'\r\nexport const REMOVE_LAST_ANSWER = 'REMOVE_LAST_ANSWER'\r\n\r\nexport const ADD_RESPONSE_GESTION_COUNT = 'ADD_RESPONSE_GESTION_COUNT'\r\nexport const REMOVE_ONE_RESPONSE_GESTION = 'REMOVE_ONE_RESPONSE_GESTION'\r\nexport const ADD_POINT_GESTION = 'ADD_POINT_GESTION'\r\nexport const REMOVE_POINT_GESTION = 'REMOVE_POINT_GESTION'\r\n\r\n\r\nexport const SET_PROPOSITION_SELECTED  = 'SET_PROPOSITION_SELECTED'\r\n\r\n\r\nexport const SET_IS_MINOR = \"SET_IS_MINOR\"\r\nexport const SET_PROFIL_PRUDENT_AUTO = \"SET_PROFIL_PRUDENT_AUTO\"\r\nexport const SET_PROFIL_TRADER_AUTO = \"SET_PROFIL_TRADER_AUTO\"","import * as types from \"../constants/actionTypes\";\r\n\r\n\r\nexport const lastAnswer = (dispatchToCall, valueToGive) => ({\r\n    type: types.SET_LAST_ANSWER,\r\n    dispatchToCall : dispatchToCall,\r\n    valueToGive: valueToGive\r\n});\r\n\r\n\r\nexport const removeLastAnswer = () => ({\r\n    type: types.REMOVE_LAST_ANSWER\r\n});\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { For } from 'react-loops'\r\nimport PropositionDataService from '../services/PropositionService'\r\nimport { incrementPointProfil, incrementReponse, setIsMinor, profilPrudentAuto, profilTraderAuto } from '../actions/profilAction'\r\nimport { lastAnswer } from '../actions/propositionAction'\r\nimport \"./Proposition.css\"\r\nimport { incrementPointGestion, incrementReponseGestion } from \"../actions/gestionAction\";\r\n\r\n\r\n\r\nconst Proposition = props => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [listePropositions, setListePropositions] = useState();\r\n\r\n  useEffect(() => getListPropositions(), [props.idQuestion])\r\n\r\n  const getListPropositions = () => {\r\n    PropositionDataService.getAllByIdQuestion(props.idQuestion)\r\n      .then(response => {\r\n        setListePropositions(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e)\r\n      })\r\n  }\r\n\r\n  const nextQuestion = (proposition) => {\r\n\r\n    // GESTION DES REGLES SPECIALES POUR CERTAINES QUESTIONS\r\n    if(proposition.id === 1) {\r\n      dispatch(setIsMinor(true))\r\n      dispatch(lastAnswer('setIsMinor', true))\r\n    } \r\n\r\n    if(proposition.id === 42 || proposition.id === 78 || proposition.id === 51 || proposition.id === 9 || proposition.id === 13 ) {\r\n      dispatch(profilPrudentAuto(true))\r\n      dispatch(lastAnswer('profilPrudentAuto', true))\r\n    }\r\n\r\n    if(proposition.id === 16 || proposition.id === 17 || proposition.id === 46) {\r\n      dispatch(profilTraderAuto(true))\r\n      dispatch(lastAnswer('profilTraderAuto', true))\r\n    }\r\n    // FIN GESTION DES REGLES SPECIALES POUR CERTAINES QUESTIONS\r\n\r\n    if (proposition.pointsProfil) {\r\n      dispatch(incrementReponse())\r\n      dispatch(incrementPointProfil(proposition.pointsProfil))\r\n      dispatch(lastAnswer('incrementPointProfil', proposition.pointsProfil))\r\n    }\r\n    if (proposition.pointsTypeGestion) {\r\n      dispatch(incrementReponseGestion())\r\n      dispatch(incrementPointGestion(proposition.pointsTypeGestion))\r\n      dispatch(lastAnswer('incrementPointGestion', proposition.pointsTypeGestion))\r\n    }\r\n    props.setIndexHandler()\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"list-group list-group-flush proposition-container \" >\r\n      <For of={listePropositions} as={proposition =>\r\n        <div className=\"list-group-item proposition-card\"\r\n          onClick={(e) => nextQuestion(proposition)}\r\n        >\r\n          {proposition.libelle}\r\n        </div>\r\n\r\n      } />\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Proposition;\r\n","import * as types from \"../constants/actionTypes\";\r\n\r\n\r\nexport const incrementPointGestion = (pointGestion) => ({\r\n    type: types.ADD_POINT_GESTION,\r\n    pointGestion : pointGestion\r\n});\r\n\r\nexport const decrementPointGestion = (pointGestionToRemove) => ({\r\n    type: types.REMOVE_POINT_GESTION ,\r\n    pointGestionToRemove : pointGestionToRemove\r\n});\r\n\r\nexport const incrementReponseGestion = () => ({\r\n    type: types.ADD_RESPONSE_GESTION_COUNT\r\n});\r\n\r\nexport const decrementReponseGestion = () => ({\r\n    type: types.REMOVE_ONE_RESPONSE_GESTION\r\n});\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Proposition from \"./Proposition\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"./Question.css\"\r\nimport { decrementPointProfil, decrementReponse, setIsMinor, profilPrudentAuto, profilTraderAuto } from '../actions/profilAction'\r\nimport { decrementPointGestion, decrementReponseGestion } from \"../actions/gestionAction\";\r\nimport { removeLastAnswer } from '../actions/propositionAction'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Question = props => {\r\n\r\n  const dispatch = useDispatch();\r\n  const initialQuestionState = {\r\n    id: props.listQuestion[0].id,\r\n    libelle: props.listQuestion[0].libelle\r\n  };\r\n  const [currentQuestion, setCurrentQuestion] = useState(initialQuestionState);\r\n  const [indexQuestion, setIndexQuestion] = useState(0);\r\n  const [pourcentageBar, setPourcentageBar] = useState(0)\r\n\r\n\r\n\r\n  const { answersList } = useSelector((state) => ({\r\n    answersList: state.proposition.answersList\r\n  })\r\n  );\r\n\r\n  useEffect(() =>\r\n    setCurrentQuestion(props.listQuestion[indexQuestion], [indexQuestion])\r\n  )\r\n\r\n  const nextQuestion = () => {\r\n    setIndexQuestion(indexQuestion + 1)\r\n  }\r\n\r\n  const previousQuestion = () => {\r\n    if (answersList) {\r\n      reversePreviousAnswer()\r\n    }\r\n    setIndexQuestion(indexQuestion - 1)\r\n  }\r\n\r\n\r\n  const reversePreviousAnswer = () => {\r\n    const anwserToRemove = answersList[answersList.length - 1]\r\n    Object.entries(anwserToRemove).map(([key, value]) => {\r\n      if (key === \"setIsMinor\") {\r\n        value === true ? dispatch(setIsMinor(false)) : dispatch(null)\r\n      }\r\n      if (key === \"profilPrudentAuto\") {\r\n        value === true ? dispatch(profilPrudentAuto(false)) : dispatch(null)\r\n      }\r\n      if (key === \"profilTraderAuto\") {\r\n        value === true ? dispatch(profilTraderAuto(false)) : dispatch(null)\r\n      }\r\n      if (key === \"incrementPointProfil\") {\r\n        dispatch(decrementPointProfil(value))\r\n        dispatch(decrementReponse())\r\n      }\r\n      if (key === \"incrementPointGestion\") {\r\n        dispatch(decrementPointGestion(value))\r\n        dispatch(decrementReponseGestion())\r\n      }\r\n      dispatch(removeLastAnswer())\r\n    })\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    setPourcentageBar(progressPercent)\r\n  }, [indexQuestion])\r\n\r\n  const displayProfil = () => {\r\n    props.displayProfil();\r\n  }\r\n\r\n  const progressPercent = ((indexQuestion + 1) * 100) / (props.listQuestion.length - 1)\r\n\r\n\r\n  if (!currentQuestion) {\r\n    return (\r\n      <div>\r\n        {displayProfil()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (currentQuestion) {\r\n\r\n    return (\r\n      <div className=\"question-container\">\r\n        <div className=\"progress\">\r\n          <div className=\"progress-bar progress-bar-striped progress-bar-animated\" style={{ width: pourcentageBar + '%' }}>\r\n            Question {indexQuestion + 1} sur {props.listQuestion.length}\r\n          </div>\r\n        </div>\r\n        <h3 className=\"titre-question\">{currentQuestion.libelle}</h3>\r\n        <div className=\"indexQuestion\"></div>\r\n        {indexQuestion > 0 ? \r\n        (<FontAwesomeIcon icon={faArrowLeft}\r\n          onClick={previousQuestion}\r\n          id=\"arrowLeft\" />) : \r\n          null}\r\n        <Proposition\r\n          setIndexHandler={nextQuestion}\r\n          idQuestion={currentQuestion.id}\r\n        />\r\n        <br />\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n};\r\n\r\nexport default Question;\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/profils\");\r\n};\r\n\r\nconst getById = id => {\r\n  return http.get(`/profils/${id}`);  \r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  getById\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ProfilDataService from '../../services/ProfilService'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\n\r\nconst ModalProfil = props => {\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n            marginBottom: 10,\r\n            // backgroundColor: 'green'\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n    const initialStateProfil = {\r\n        id: null,\r\n        libelle: \"\",\r\n        temps: \"\",\r\n        variation: \"\",\r\n        actif_profil: [],\r\n        conseil_profil: [],\r\n        description: \"\"\r\n    };\r\n\r\n    const [profil, setProfil] = useState(initialStateProfil);\r\n    const [allProfils, setAllProfils] = useState([]);\r\n\r\n    const classes = useStyles();\r\n\r\n    const isMinor = useSelector((state) => {\r\n        return state.profil.isMinor\r\n    })\r\n\r\n    const isProfilTraderAuto = useSelector((state) => {\r\n        return state.profil.isProfilTraderAuto\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!isMinor) {\r\n            getProfil()\r\n        }\r\n\r\n        getAllProfil()\r\n    }, [])\r\n\r\n    const getProfil = () => {\r\n        ProfilDataService.getById(props.ResultatProfil)\r\n            .then(response => {\r\n                setProfil({\r\n                    id: response.data.id,\r\n                    libelle: response.data.libelle,\r\n                    temps: response.data.temps,\r\n                    variation: response.data.variation,\r\n                    actif_profil: response.data.actif_profil,\r\n                    description: response.data.description\r\n                });\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const getAllProfil = () => {\r\n        ProfilDataService.getAll()\r\n            .then(response => {\r\n                setAllProfils(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isMinor ? <h3 style={{ backgroundColor: \"LightCoral\", fontStyle: \"italic\" }}>Il faut avoir 16 ans pour investir sur les marchés financiers ! </h3> : null}\r\n            <div>\r\n                Vos réponses permettent de déterminer que vous pouvez opter pour un niveau de risque\r\n            </div>\r\n            {allProfils.map((p, key) => {\r\n                return (\r\n                    <Card key={key} className={classes.root}\r\n                        style={{\r\n                            backgroundColor: (isProfilTraderAuto) ?\r\n                                ((p.libelle === profil.libelle || p.libelle === \"Trader\") ?\r\n                                    ((p.libelle === \"Trader\") ? 'Red' : 'LightBlue') : null) :\r\n                                ((p.libelle === profil.libelle) ? 'LightBlue' : null)\r\n                        }}>\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                {p.libelle}\r\n                            </Typography>\r\n\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                Variation moyenne annuelle cible : {p.variation}\r\n                                <br />\r\n                                Temps à y consacrer (Sauf gestion déléguée) : {p.temps}\r\n                                {profil.libelle === \"Trader\" && p.libelle === \"Trader\" ?\r\n                                    (<div>\r\n                                        <br />\r\n                                        <p>Vos réponses permettent de déterminer qu'en plus de votre profil d'investisseur vous pouvez envisager le profil Trader</p>\r\n                                    </div>) :\r\n                                    (null)}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n    return http.get(\"/typesGestion\");\r\n};\r\n\r\nconst getById = id => {\r\n    return http.get(`/typesGestion/${id}`);\r\n};\r\n\r\n\r\nexport default {\r\n    getAll,\r\n    getById\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GestionDataService from '../../services/TypeGestionServices'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst ModalProfil = props => {\r\n\r\n    const initialTypeGestion = {\r\n        id: null,\r\n        libelle: \"\",\r\n        description: \"\"\r\n    }\r\n\r\n    const [typeGestion, setTypeGestion] = useState(initialTypeGestion)\r\n    const [allTypesGestion, setAllTypesGestion] = useState([])\r\n\r\n    const getAllTypesGestion = () => {\r\n        GestionDataService.getAll()\r\n            .then(response => {\r\n                setAllTypesGestion(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const getTypeGestion = () => {\r\n        GestionDataService.getById(props.ResultatGestion)\r\n        .then(response => {\r\n            setTypeGestion({\r\n                id: response.data.id,\r\n                libelle: response.data.libelle,\r\n                description: response.data.description\r\n            });\r\n        })\r\n        .catch(e => {\r\n            console.log(e)\r\n        })\r\n    }\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n            marginBottom: 10,\r\n            // backgroundColor: 'green'\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        getAllTypesGestion()\r\n        getTypeGestion()\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div>\r\n            Vos réponses permettent de déterminer que vous pouvez opter pour une gestion\r\n            </div>\r\n            {allTypesGestion.map((g, key) => {\r\n                return (\r\n                    <Card key={key} className={classes.root} style={{ backgroundColor: (g.libelle === typeGestion.libelle) ? 'LightBlue' : null }}>\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                {g.libelle}\r\n                            </Typography>\r\n\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                {g.description}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n    return http.get(\"/actifs\");\r\n};\r\n\r\nconst getById = id => {\r\n    return http.get(`/actifs/${id}`);\r\n};\r\n\r\nconst getByProfilId = idProfil => {\r\n    const params = {\r\n        idProfil: idProfil\r\n    }\r\n    return http.post(\"/actifs/getByProfilId/\", { params });\r\n};\r\n\r\n\r\nexport default {\r\n    getAll,\r\n    getById,\r\n    getByProfilId\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ActifsDataService from '../../services/ActifServices'\r\nimport ProfilDataService from '../../services/ProfilService'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst ModalProfil = props => {\r\n\r\n    // const [allActifs, setAllActifs] = useState([])\r\n    const [actifSelected, setActifSelected] = useState([])\r\n    const [allProfils, setAllProfils] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getActifSelected()\r\n        getAllProfil()\r\n    }, [])\r\n\r\n    const getAllProfil = () => {\r\n        ProfilDataService.getAll()\r\n            .then(response => {\r\n                setAllProfils(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const getActifSelected = () => {\r\n        ActifsDataService.getByProfilId(props.ResultatProfil)\r\n            .then(response => {\r\n                setActifSelected(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n            marginBottom: 10,\r\n            // backgroundColor: 'green'\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n    const isProfilTraderAuto = useSelector((state) => {\r\n        return state.profil.isProfilTraderAuto\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                Vos réponses permettent de déterminer que vous pouvez investir sur les marchés et produits suivants\r\n            </div>\r\n            {allProfils.map((p, key) => {\r\n                return (\r\n                    <Card key={key} className={classes.root} style={{\r\n                        backgroundColor:\r\n                            (isProfilTraderAuto) ?\r\n                                ((p.id === props.ResultatProfil || p.id === 5) ?\r\n                                    ((p.id === 5) ? 'Red' : 'LightBlue') : null) :\r\n                                ((p.id === props.ResultatProfil) ? 'LightBlue' : null)\r\n                    }}>\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                {p.libelle}\r\n                            </Typography>\r\n                            {(isProfilTraderAuto) ?\r\n                                ((p.id === props.ResultatProfil || p.id === 5) ?\r\n                                    (<div>\r\n                                        <TableContainer component={Paper}>\r\n                                            <Table aria-label=\"simple table\">\r\n                                                <TableHead>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Types d'Actifs</TableCell>\r\n                                                        <TableCell align=\"left\">Pondération</TableCell>\r\n                                                        <TableCell align=\"left\">Produits</TableCell>\r\n                                                    </TableRow>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {actifSelected.map((a, key) => (\r\n                                                        <TableRow key={key}>\r\n                                                            <TableCell component=\"th\" scope=\"row\">\r\n                                                                {a.libelle}\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"left\">{a.ponderation}</TableCell>\r\n                                                            <TableCell align=\"left\">{a.produit_actif.map((p, key) => {\r\n                                                                return (\r\n                                                                    <div key={key}>{p.libelle}</div>\r\n                                                                )\r\n                                                            })}</TableCell>\r\n                                                        </TableRow>\r\n                                                    ))}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </div>) : null) :\r\n                                ((p.id === props.ResultatProfil) ?\r\n                                    (<div>\r\n                                        <TableContainer component={Paper}>\r\n                                            <Table aria-label=\"simple table\">\r\n                                                <TableHead>\r\n                                                    <TableRow>\r\n                                                        <TableCell>Types d'Actifs</TableCell>\r\n                                                        <TableCell align=\"left\">Pondération</TableCell>\r\n                                                        <TableCell align=\"left\">Produits</TableCell>\r\n                                                    </TableRow>\r\n                                                </TableHead>\r\n                                                <TableBody>\r\n                                                    {actifSelected.map((a, key) => (\r\n                                                        <TableRow key={key}>\r\n                                                            <TableCell component=\"th\" scope=\"row\">\r\n                                                                {a.libelle}\r\n                                                            </TableCell>\r\n                                                            <TableCell align=\"left\">{a.ponderation}</TableCell>\r\n                                                            <TableCell align=\"left\">{a.produit_actif.map((p, key) => {\r\n                                                                return (\r\n                                                                    <div key={key}>{p.libelle}</div>\r\n                                                                )\r\n                                                            })}</TableCell>\r\n                                                        </TableRow>\r\n                                                    ))}\r\n                                                </TableBody>\r\n                                            </Table>\r\n                                        </TableContainer>\r\n                                    </div>) : (null))}\r\n\r\n                        </CardContent>\r\n                    </Card>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import React from \"react\";\r\n\r\n\r\nconst ModalProfil = props => {\r\n\r\n\r\n    return (\r\n\r\n        <div  >\r\n           \r\n           <a href=\"https://www.boursedirect.fr/fr/support/debuter-en-bourse\" \r\n           target=\"_blank\"\r\n           rel=\"noopener noreferrer\">Rendez-vous sur notre rubrique \"Formation\" pour trouver : nos guides, nos formations gratuites, nos coachings personnalisés et des vidéos</a>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n    return http.get(\"/conseils\");\r\n};\r\n\r\nconst getById = id => {\r\n    return http.get(`/conseils/${id}`);\r\n};\r\n\r\n\r\nexport default {\r\n    getAll,\r\n    getById\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { For } from 'react-loops'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport ConseilDataService from '../../services/ConseilServices'\r\n\r\nconst ModalProfil = props => {\r\n\r\n    const [allRegles, setAllRegles] = useState([])\r\n    const [activeOnglet, setActiveOnglet] = useState()\r\n    const [modalShow, setModalShow] = useState(false)\r\n\r\n    useEffect(() => {\r\n        getAllRegles()\r\n    }, [])\r\n\r\n    const getOnglet = (onglet) => {\r\n        setActiveOnglet(onglet)\r\n    }\r\n\r\n    const getAllRegles = () => {\r\n        ConseilDataService.getAll()\r\n            .then(response => {\r\n                setAllRegles(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const truncate = (text) => {\r\n        return text.length > 60 ? text.substring(0, 60) + \"...\" : text;\r\n    }\r\n\r\n    const MydModalWithGrid = props => {\r\n        return (\r\n            <Modal {...props}\r\n                dialogClassName=\"modal-bloc\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        {activeOnglet ? <p>{activeOnglet.libelle}</p> : <p>NADA</p>}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {activeOnglet ? <p>{activeOnglet.description}</p> : <p>NADA</p>}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"btn-close\">Fermer</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <>\r\n            <p>Voici les principales règles à connaître pour devenir un {props.ResultatProfil === 5 ? (\"Trader\") : (\"Investisseur\")} performant !</p>\r\n                {props.ResultatProfil === 5 ?\r\n                    (<For of={allRegles} as={onglet =>\r\n                        <div style={{ width: '100%' }}>\r\n                            <Button className=\"bloc-btn\" onClick={() => {\r\n                                setModalShow(true);\r\n                                getOnglet(onglet)\r\n                            }}>\r\n                                {truncate(onglet.libelle)}\r\n                            </Button>\r\n                        </div>\r\n                    } />) :\r\n                    (<For of={allRegles.filter(regle => regle.id !== 9 &&\r\n                        regle.id !== 10 && \r\n                        regle.id !== 11 && \r\n                        regle.id !== 12 && \r\n                        regle.id !== 13 &&\r\n                        regle.id !== 14)} as={onglet =>\r\n                        <div style={{ width: '100%' }}>\r\n                            <Button className=\"bloc-btn\" onClick={() => {\r\n                                setModalShow(true);\r\n                                getOnglet(onglet)\r\n                            }}>\r\n                                {truncate(onglet.libelle)}\r\n                            </Button>\r\n                        </div>\r\n                    } />)}\r\n\r\n                <MydModalWithGrid show={modalShow} onHide={() => setModalShow(false)} />\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n    return http.get(\"/supportsInv\");\r\n};\r\n\r\nconst getById = id => {\r\n    return http.get(`/supportsInv/${id}`);\r\n};\r\n\r\nconst getByPropositionId = idProposition => {\r\n    const params = {\r\n        idProposition: idProposition\r\n    }\r\n    return http.post(\"/supportsInv/getByPropositionId/\", { params });\r\n};\r\n\r\n\r\nexport default {\r\n    getAll,\r\n    getById,\r\n    getByPropositionId\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SupportDataService from '../../services/SupportInvServices'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst ModalProfil = props => {\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n            marginBottom: 10,\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    const [listeSupports, setListeSupports] = useState([])\r\n    const [allSupports, setAllSupports] = useState([])\r\n\r\n    useEffect(() => {\r\n        getAllSupports()\r\n    }, [])\r\n\r\n\r\n    const getAllSupports = () => {\r\n        SupportDataService.getAll()\r\n            .then(response => {\r\n                setAllSupports(response.data)\r\n\r\n                let listeTemp = []\r\n                // 1 = Prudent;\r\n                if(props.ResultatProfil === 1) {\r\n                    listeTemp = response.data.filter(support => support.id === 2 || support.id === 3);\r\n                }\r\n                // 2 = Equilibré\r\n                if(props.ResultatProfil === 2) {\r\n                    listeTemp = response.data.filter(support => support.id === 1 || support.id === 2 || support.id === 3 || support.id === 4);\r\n                }\r\n                // 3 = Dynamique\r\n                if(props.ResultatProfil === 3) {\r\n                    listeTemp = response.data.filter(support => support.id === 1 || support.id === 2 || support.id === 3 || support.id === 4 || support.id === 5);\r\n                }\r\n                // 4 = Offensif\r\n                if(props.ResultatProfil === 4) {\r\n                    listeTemp = response.data.filter(support => support.id === 1 || support.id === 2 || support.id === 5);\r\n                }\r\n                // 5 = Trader\r\n                if(props.ResultatProfil === 5) {\r\n                    listeTemp = response.data.filter(support => support.id === 1 || support.id === 2 || support.id === 5);\r\n                }\r\n                setListeSupports(listeTemp)\r\n\r\n\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div>\r\n                Vos réponses permettent de déterminer que les supports d'investissement qui vous correspondent sont\r\n        </div>\r\n            {allSupports.map((s, key) => {\r\n                var equals = listeSupports.some(el => el.libelle === s.libelle);\r\n                return (\r\n                    <Card key={key} className={classes.root} style={{ backgroundColor: (equals) ? 'LightBlue' : null }}>\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                {s.libelle}\r\n                            </Typography>\r\n\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                <br />\r\n                                <a href={s.description} target=\"_blank\" rel=\"noopener noreferrer\">Pour plus d'infos, suivez ce lien</a>\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import React, { useState } from \"react\";\r\nimport { For } from 'react-loops'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { useSelector } from \"react-redux\";\r\nimport ProfilModal from \"./modals/profil.modal\";\r\nimport GestionModal from \"./modals/gestion.modal\";\r\nimport MarcheModal from \"./modals/marche.modal\";\r\nimport PlusLoinModal from \"./modals/plusLoin.modal\";\r\nimport ReglesModal from \"./modals/regles.modal\";\r\nimport SupportModal from \"./modals/support.modal\";\r\nimport './Profil.css'\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHome } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Profil = props => {\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [activeOnglet, setActiveOnglet] = useState();\r\n\r\n    const listeOnglets = [\r\n        'Type de Gestion',\r\n        'Profil risque gain',\r\n        'Support d\\'investissement',\r\n        'Marchés & Produits',\r\n        'Règles d\\'Or',\r\n        'Pour aller plus loin']\r\n\r\n    const nbPointProfil = useSelector((state) => {\r\n        return state.profil.point\r\n    });\r\n    const nbQuestionProfil = useSelector((state) => {\r\n        return state.profil.nbReponses\r\n\r\n    });\r\n\r\n    const isProfilPrudentAuto = useSelector((state) => {\r\n        return state.profil.isProfilPrudentAuto\r\n    });\r\n\r\n    let ResultatProfil = 0;\r\n    if (isProfilPrudentAuto) {\r\n        ResultatProfil = 1;\r\n    } else {\r\n        ResultatProfil = Number((nbPointProfil / nbQuestionProfil).toFixed(0));\r\n    }\r\n\r\n\r\n    const nbPointGestion = useSelector((state) => {\r\n        return state.gestion.point\r\n    });\r\n\r\n    const nbQuestionGestion = useSelector((state) => {\r\n        return state.gestion.nbReponses\r\n    });\r\n\r\n    const ResultatGestion = Number((nbPointGestion / nbQuestionGestion).toFixed(0));\r\n\r\n    // const IdPropositionSupport = useSelector((state) => {\r\n    //     return state.support.propositionSelected\r\n    // })\r\n\r\n    const getOnglet = (onglet) => {\r\n        setActiveOnglet(onglet)\r\n    }\r\n\r\n\r\n    const MydModalWithGrid = props => {\r\n        return (\r\n            <Modal {...props}\r\n                dialogClassName=\"modal-bloc\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        {activeOnglet ? <p>{activeOnglet}</p> : <p>NADA</p>}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {activeOnglet === \"Type de Gestion\" ? <GestionModal ResultatGestion={ResultatGestion} /> : null}\r\n                    {activeOnglet === \"Profil risque gain\" ? <ProfilModal ResultatProfil={ResultatProfil} /> : null}\r\n                    {activeOnglet === \"Support d'investissement\" ? <SupportModal ResultatProfil={ResultatProfil} /> : null}\r\n                    {activeOnglet === \"Marchés & Produits\" ? <MarcheModal ResultatProfil={ResultatProfil} /> : null}\r\n                    {activeOnglet === \"Règles d'Or\" ? <ReglesModal ResultatProfil={ResultatProfil} /> : null}\r\n                    {activeOnglet === \"Pour aller plus loin\" ? <PlusLoinModal /> : null}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"btn-close\">Fermer</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"result-div\">\r\n                <h1>RESULTATS</h1>\r\n                <>\r\n                    <For of={listeOnglets} as={onglet =>\r\n                        <div className=\"resultCard\">\r\n                            <Button className=\"bloc-btn\" onClick={() => {\r\n                                setModalShow(true);\r\n                                getOnglet(onglet)\r\n                            }}>\r\n                                {onglet}\r\n                            </Button>\r\n                        </div>\r\n                    } />\r\n                    <MydModalWithGrid show={modalShow} onHide={() => setModalShow(false)} />\r\n                </>\r\n            </div>\r\n            <br />\r\n            <div id=\"home-div\">\r\n                <FontAwesomeIcon icon={faHome}\r\n                    size='3x'\r\n                    className=\"home-btn\"\r\n                    onClick={() => { window.location.reload(false) }}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profil;","import React, { useState } from \"react\";\r\nimport './Accueil.css'\r\nimport QuestionDataService from \"../services/QuestionService\"\r\nimport Question from \"../components/Question\"\r\nimport Profil from \"../components/Profil\"\r\n\r\nconst Accueil = props => {\r\n\r\n\r\n    const [listQuestions, setListQuestions] = useState();\r\n    const [target, setTarget] = useState(\"accueil\");\r\n\r\n    const getListQuestions = () => {\r\n        QuestionDataService.getAll()\r\n            .then(response => {\r\n                setListQuestions(response.data);\r\n                setTarget(\"questionnaire\")\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const displayProfil = () => {\r\n        setTarget(\"profil\")\r\n    }\r\n\r\n\r\n    if (target === \"profil\") {\r\n        return (\r\n            <Profil />\r\n        )\r\n    }\r\n\r\n    if (target === \"accueil\") {\r\n        return (\r\n            <div className=\"div-accueil\">\r\n               \r\n                <br /><br />\r\n                <span>Répondez le plus naturellement à ces questions afin de déterminer VOTRE PROFIL ! \r\n            </span> <br /><br />\r\n                <button className=\"btn btn-start\"\r\n                    onClick={getListQuestions}\r\n                >\r\n                    Commencer le questionnaire\r\n              </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (target === \"questionnaire\") {\r\n        return (\r\n            <Question\r\n                listQuestion={listQuestions}\r\n                displayProfil={displayProfil} />\r\n        )\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default Accueil;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport Accueil from \"./components/Accueil\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <h1>PROFILER</h1>\r\n        <span>Bien se connaître pour mieux investir</span>\r\n      </div>\r\n      <div className=\"main-container\">\r\n        <Accueil />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as types from \"../constants/actionTypes\";\r\n\r\nconst initialState = {\r\n    point: 0,\r\n    nbReponses: 0,\r\n    isMinor: false,\r\n    isProfilPrudentAuto: false,\r\n    isProfilTraderAuto: false\r\n}\r\n\r\nexport default function profil(state = initialState, action) {\r\n    switch (action.type) {\r\n        case types.ADD_POINT_PROFIL:\r\n            return {\r\n                ...state,\r\n                point: state.point + action.pointProfil\r\n            }\r\n        case types.REMOVE_POINT_PROFIL:\r\n            return {\r\n                ...state,\r\n                point: state.point - action.pointProfilToRemove\r\n            }\r\n        case types.ADD_RESPONSE_COUNT:\r\n            return {\r\n                ...state,\r\n                nbReponses: state.nbReponses + 1\r\n            }\r\n        case types.REMOVE_ONE_RESPONSE:\r\n            return {\r\n                ...state,\r\n                nbReponses: state.nbReponses - 1\r\n            }\r\n        case types.SET_IS_MINOR:\r\n            return {\r\n                ...state,\r\n                isMinor: action.isMinor\r\n            }\r\n        case types.SET_PROFIL_PRUDENT_AUTO:\r\n            return {\r\n                ...state,\r\n                isProfilPrudentAuto: action.isProfilPrudent\r\n            }\r\n        case types.SET_PROFIL_TRADER_AUTO:\r\n            return {\r\n                ...state,\r\n                isProfilTraderAuto: action.isProfilTraderAuto\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import * as types from \"../constants/actionTypes\";\r\n\r\nconst initialState = {\r\n    point: 0,\r\n    nbReponses: 0\r\n\r\n}\r\n\r\nexport default function gestion(state = initialState, action) {\r\n    switch (action.type) {\r\n        case types.ADD_POINT_GESTION:\r\n            return {\r\n                ...state,\r\n                point: state.point + action.pointGestion\r\n            }\r\n        case types.REMOVE_POINT_GESTION:\r\n            return {\r\n                ...state,\r\n                point: state.point - action.pointGestionToRemove\r\n            }\r\n        case types.ADD_RESPONSE_GESTION_COUNT:\r\n            return {\r\n                ...state,\r\n                nbReponses: state.nbReponses + 1\r\n            }\r\n        case types.REMOVE_ONE_RESPONSE_GESTION:\r\n            return {\r\n                ...state,\r\n                nbReponses: state.nbReponses - 1\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import { combineReducers } from 'redux';\r\nimport profil from './profilReducer';\r\nimport gestion from './gestionReducer';\r\nimport proposition from './propositionReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    profil,\r\n    gestion,\r\n    proposition\r\n});\r\n\r\nexport default rootReducer","import * as types from \"../constants/actionTypes\";\r\n\r\nexport default function proposition(state = { answersList: [] }, action) {\r\n    switch (action.type) {\r\n        case types.SET_LAST_ANSWER:\r\n            return {\r\n                ...state,\r\n                answersList: [...state.answersList, { [action.dispatchToCall]: action.valueToGive }]\r\n\r\n            }\r\n        case types.REMOVE_LAST_ANSWER:\r\n            return {\r\n                ...state,\r\n                answersList: state.answersList.slice(0, -1)\r\n\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\n\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { Provider } from 'react-redux';\r\nimport reducer from './reducers';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk))\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}