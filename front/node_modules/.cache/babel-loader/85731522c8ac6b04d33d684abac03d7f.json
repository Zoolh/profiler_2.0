{"ast":null,"code":"var _jsxFileName = \"C:\\\\Perso\\\\profiler_2.0\\\\front\\\\src\\\\components\\\\Proposition.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { For } from 'react-loops';\nimport PropositionDataService from '../services/PropositionService';\nimport { incrementPointProfil, incrementReponse } from '../actions/profilAction';\nimport \"./Proposition.css\";\n\nconst Proposition = props => {\n  const dispatch = useDispatch();\n  const [listePropositions, setListePropositions] = useState();\n  useEffect(() => getListPropositions(), [props.idQuestion]);\n\n  const getListPropositions = () => {\n    PropositionDataService.getAllByIdQuestion(props.idQuestion).then(response => {\n      setListePropositions(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const nextQuestion = proposition => {\n    if (proposition.pointsProfil) {\n      dispatch(incrementReponse());\n      dispatch(incrementPointProfil(proposition.pointsProfil));\n    }\n\n    props.setIndexHandler();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"list-group list-group-flush proposition-container \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(For, {\n    of: listePropositions,\n    as: proposition => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"list-group-item proposition-card\",\n      onClick: e => nextQuestion(proposition),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, proposition.libelle),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Proposition;","map":{"version":3,"sources":["C:/Perso/profiler_2.0/front/src/components/Proposition.js"],"names":["React","useState","useEffect","useSelector","useDispatch","For","PropositionDataService","incrementPointProfil","incrementReponse","Proposition","props","dispatch","listePropositions","setListePropositions","getListPropositions","idQuestion","getAllByIdQuestion","then","response","data","catch","e","console","log","nextQuestion","proposition","pointsProfil","setIndexHandler","libelle"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,OAAOC,sBAAP,MAAmC,gCAAnC;AACA,SAASC,oBAAT,EAA+BC,gBAA/B,QAAuD,yBAAvD;AACA,OAAO,mBAAP;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AAEA,QAAM,CAACQ,iBAAD,EAAoBC,oBAApB,IAA4CZ,QAAQ,EAA1D;AAEAC,EAAAA,SAAS,CAAC,MAAMY,mBAAmB,EAA1B,EAA8B,CAACJ,KAAK,CAACK,UAAP,CAA9B,CAAT;;AAEA,QAAMD,mBAAmB,GAAG,MAAM;AAChCR,IAAAA,sBAAsB,CAACU,kBAAvB,CAA0CN,KAAK,CAACK,UAAhD,EACGE,IADH,CACQC,QAAQ,IAAI;AAChBL,MAAAA,oBAAoB,CAACK,QAAQ,CAACC,IAAV,CAApB;AACD,KAHH,EAIGC,KAJH,CAISC,CAAC,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD,KANH;AAOD,GARD;;AAUA,QAAMG,YAAY,GAAIC,WAAD,IAAiB;AACpC,QAAIA,WAAW,CAACC,YAAhB,EAA8B;AAC5Bf,MAAAA,QAAQ,CAACH,gBAAgB,EAAjB,CAAR;AACAG,MAAAA,QAAQ,CAACJ,oBAAoB,CAACkB,WAAW,CAACC,YAAb,CAArB,CAAR;AACD;;AACDhB,IAAAA,KAAK,CAACiB,eAAN;AACD,GAND;;AASA,sBAEE;AAAK,IAAA,SAAS,EAAC,oDAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AAAK,IAAA,EAAE,EAAEf,iBAAT;AAA4B,IAAA,EAAE,EAAEa,WAAW,iBACzC;AAAK,MAAA,SAAS,EAAC,kCAAf;AACE,MAAA,OAAO,EAAGJ,CAAD,IAAOG,YAAY,CAACC,WAAD,CAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGGA,WAAW,CAACG,OAHf,CADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF;AAcD,CAxCD;;AA0CA,eAAenB,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { For } from 'react-loops'\r\nimport PropositionDataService from '../services/PropositionService'\r\nimport { incrementPointProfil, incrementReponse } from '../actions/profilAction'\r\nimport \"./Proposition.css\"\r\n\r\nconst Proposition = props => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [listePropositions, setListePropositions] = useState();\r\n\r\n  useEffect(() => getListPropositions(), [props.idQuestion])\r\n\r\n  const getListPropositions = () => {\r\n    PropositionDataService.getAllByIdQuestion(props.idQuestion)\r\n      .then(response => {\r\n        setListePropositions(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e)\r\n      })\r\n  }\r\n\r\n  const nextQuestion = (proposition) => {\r\n    if (proposition.pointsProfil) {\r\n      dispatch(incrementReponse())\r\n      dispatch(incrementPointProfil(proposition.pointsProfil))\r\n    }\r\n    props.setIndexHandler()\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"list-group list-group-flush proposition-container \" >\r\n      <For of={listePropositions} as={proposition =>\r\n        <div className=\"list-group-item proposition-card\"\r\n          onClick={(e) => nextQuestion(proposition)}\r\n        >\r\n          {proposition.libelle}\r\n        </div>\r\n\r\n      } />\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Proposition;\r\n"]},"metadata":{},"sourceType":"module"}