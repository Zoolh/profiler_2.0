{"ast":null,"code":"var _jsxFileName = \"C:\\\\Perso\\\\profiler_2.0\\\\front\\\\src\\\\components\\\\Profil.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { For } from 'react-loops';\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Modal from 'react-bootstrap/Modal';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport ProfilDataService from '../services/ProfilService';\nimport { useSelector } from \"react-redux\";\nimport ProfilModal from \"./modals/profil.modal\";\nimport GestionModal from \"./modals/gestion.modal\";\nimport MarcheModal from \"./modals/marche.modal\";\nimport PlusLoinModal from \"./modals/plusLoin.modal\";\nimport ReglesModal from \"./modals/regles.modal\";\nimport SupportModal from \"./modals/support.modal\";\nimport './Profil.css';\nimport ModalBody from \"react-bootstrap/ModalBody\";\n\nconst Profil = props => {\n  const initialStateProfil = {\n    id: null,\n    libelle: \"\",\n    temps: \"\",\n    variation: \"\",\n    actif_profil: [],\n    conseil_profil: [],\n    description: \"\"\n  };\n  const [listeOptions, setListeOptions] = useState(0);\n  const [modalShow, setModalShow] = useState(false);\n  const [activeOnglet, setActiveOnglet] = useState();\n  const [profil, setProfil] = useState(initialStateProfil);\n  const listeOnglets = ['Type de Gestion', 'Profil risque gain', 'Support d\\'investissement', 'Marchés & Produits', 'Règles d\\'Or', 'Pour aller plus loin'];\n  const nbPointProfil = useSelector(state => {\n    return state.profil.point;\n  });\n  const nbQuestionProfil = useSelector(state => {\n    return state.profil.nbReponses;\n  });\n  const ResultatProfil = Number((nbPointProfil / nbQuestionProfil).toFixed(0));\n\n  const getData = onglet => {\n    if (onglet === \"Profil risque gain\") {\n      getProfil();\n    }\n\n    setActiveOnglet(onglet);\n  };\n\n  const getProfil = () => {\n    ProfilDataService.getById(ResultatProfil).then(response => {\n      console.log(response.data);\n      setProfil({\n        id: response.data.id,\n        libelle: response.data.libelle,\n        temps: response.data.temps,\n        variation: response.data.variation,\n        actif_profil: response.data.actif_profil,\n        description: response.data.description\n      });\n      console.log(profil);\n      return profil;\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const MydModalWithGrid = props => {\n    return /*#__PURE__*/React.createElement(Modal, Object.assign({}, props, {\n      dialogClassName: \"modal-bloc\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"contained-modal-title-vcenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }\n    }, activeOnglet ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 41\n      }\n    }, activeOnglet) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 65\n      }\n    }, \"NADA\"))), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, activeOnglet === \"Type de Gestion\" ? /*#__PURE__*/React.createElement(GestionModal, {\n      profil: \"toto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 59\n      }\n    }) : null, activeOnglet === \"Profil risque gain\" ? /*#__PURE__*/React.createElement(ProfilModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 62\n      }\n    }) : null, activeOnglet === \"Support d\\'investissement\" ? /*#__PURE__*/React.createElement(SupportModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 69\n      }\n    }) : null, activeOnglet === \"Marchés & Produits\" ? /*#__PURE__*/React.createElement(MarcheModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 62\n      }\n    }) : null, activeOnglet === \"Règles d\\'Or\" ? /*#__PURE__*/React.createElement(ReglesModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 56\n      }\n    }) : null, activeOnglet === \"Pour aller plus loin\" ? /*#__PURE__*/React.createElement(PlusLoinModal, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 64\n      }\n    }) : null), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: props.onHide,\n      className: \"btn-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }, \"Fermer\")));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, \"RESULTATS\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"Profil n\\xB0 : \", ResultatProfil), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(For, {\n    of: listeOnglets,\n    as: onglet => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"resultCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"bloc-btn\",\n      onClick: () => {\n        setModalShow(true);\n        getData(onglet);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }\n    }, onglet)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(MydModalWithGrid, {\n    show: modalShow,\n    onHide: () => setModalShow(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Profil;","map":{"version":3,"sources":["C:/Perso/profiler_2.0/front/src/components/Profil.js"],"names":["React","useState","useEffect","For","useAccordionToggle","Accordion","Card","Modal","Container","Row","Col","Button","ProfilDataService","useSelector","ProfilModal","GestionModal","MarcheModal","PlusLoinModal","ReglesModal","SupportModal","ModalBody","Profil","props","initialStateProfil","id","libelle","temps","variation","actif_profil","conseil_profil","description","listeOptions","setListeOptions","modalShow","setModalShow","activeOnglet","setActiveOnglet","profil","setProfil","listeOnglets","nbPointProfil","state","point","nbQuestionProfil","nbReponses","ResultatProfil","Number","toFixed","getData","onglet","getProfil","getById","then","response","console","log","data","catch","e","MydModalWithGrid","onHide"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { For } from 'react-loops'\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport ProfilDataService from '../services/ProfilService'\r\nimport { useSelector } from \"react-redux\";\r\nimport ProfilModal from \"./modals/profil.modal\";\r\nimport GestionModal from \"./modals/gestion.modal\";\r\nimport MarcheModal from \"./modals/marche.modal\";\r\nimport PlusLoinModal from \"./modals/plusLoin.modal\";\r\nimport ReglesModal from \"./modals/regles.modal\";\r\nimport SupportModal from \"./modals/support.modal\";\r\nimport './Profil.css'\r\nimport ModalBody from \"react-bootstrap/ModalBody\";\r\n\r\nconst Profil = props => {\r\n\r\n    const initialStateProfil = {\r\n        id: null,\r\n        libelle: \"\",\r\n        temps: \"\",\r\n        variation: \"\",\r\n        actif_profil: [],\r\n        conseil_profil: [],\r\n        description: \"\"\r\n    };\r\n\r\n    const [listeOptions, setListeOptions] = useState(0)\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [activeOnglet, setActiveOnglet] = useState();\r\n    const [profil, setProfil] = useState(initialStateProfil);\r\n\r\n    const listeOnglets = ['Type de Gestion',\r\n        'Profil risque gain',\r\n        'Support d\\'investissement',\r\n        'Marchés & Produits',\r\n        'Règles d\\'Or',\r\n        'Pour aller plus loin']\r\n\r\n    const nbPointProfil = useSelector((state) => {\r\n        return state.profil.point\r\n    });\r\n\r\n    const nbQuestionProfil = useSelector((state) => {\r\n        return state.profil.nbReponses\r\n\r\n    });\r\n    const ResultatProfil = Number((nbPointProfil / nbQuestionProfil).toFixed(0));\r\n\r\n    const getData = (onglet) => {\r\n        if (onglet === \"Profil risque gain\") {\r\n            getProfil()\r\n        }\r\n        setActiveOnglet(onglet)\r\n\r\n    }\r\n\r\n    const getProfil = () => {\r\n        ProfilDataService.getById(ResultatProfil)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                setProfil({\r\n                    id: response.data.id,\r\n                    libelle: response.data.libelle,\r\n                    temps: response.data.temps,\r\n                    variation: response.data.variation,\r\n                    actif_profil: response.data.actif_profil,\r\n                    description: response.data.description\r\n                });\r\n                console.log(profil)\r\n                return profil\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n\r\n\r\n    const MydModalWithGrid = props => {\r\n        return (\r\n            <Modal {...props}\r\n                dialogClassName=\"modal-bloc\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        {activeOnglet ? <p>{activeOnglet}</p> : <p>NADA</p>}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {activeOnglet === \"Type de Gestion\" ? <GestionModal profil=\"toto\" /> : null}\r\n                    {activeOnglet === \"Profil risque gain\" ? <ProfilModal /> : null}\r\n                    {activeOnglet === \"Support d\\'investissement\" ? <SupportModal /> : null}\r\n                    {activeOnglet === \"Marchés & Produits\" ? <MarcheModal /> : null}\r\n                    {activeOnglet === \"Règles d\\'Or\" ? <ReglesModal /> : null}\r\n                    {activeOnglet === \"Pour aller plus loin\" ? <PlusLoinModal /> : null}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"btn-close\">Fermer</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>RESULTATS</h1>\r\n            <p>Profil n° : {ResultatProfil}</p>\r\n            <>\r\n                <For of={listeOnglets} as={onglet =>\r\n                    <div className=\"resultCard\">\r\n                        <Button className=\"bloc-btn\" onClick={() => {\r\n                            setModalShow(true);\r\n                            getData(onglet)\r\n                        }}>\r\n                            {onglet}\r\n                        </Button>\r\n                    </div>\r\n                } />\r\n                <MydModalWithGrid show={modalShow} onHide={() => setModalShow(false)} />\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profil;"]},"metadata":{},"sourceType":"module"}