{"ast":null,"code":"var _jsxFileName = \"C:\\\\Perso\\\\profiler_2.0\\\\front\\\\src\\\\components\\\\modals\\\\regles.modal.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { For } from 'react-loops';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport ConseilDataService from '../../services/ConseilServices';\n\nconst ModalProfil = props => {\n  const [allRegles, setAllRegles] = useState([]);\n  const [allTradersRegles, setAllTradersRegles] = useState([]);\n  const [activeOnglet, setActiveOnglet] = useState();\n  const [modalShow, setModalShow] = useState(false);\n  useEffect(() => {\n    getAllRegles();\n  }, []);\n\n  const getOnglet = onglet => {\n    setActiveOnglet(onglet);\n  };\n\n  const getAllRegles = () => {\n    ConseilDataService.getAll().then(response => {\n      setAllRegles(response.data);\n      console.log(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const truncate = text => {\n    return text.length > 60 ? text.substring(0, 60) + \"...\" : text;\n  };\n\n  const MydModalWithGrid = props => {\n    return /*#__PURE__*/React.createElement(Modal, Object.assign({}, props, {\n      dialogClassName: \"modal-bloc\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"contained-modal-title-vcenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    }, activeOnglet ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 41\n      }\n    }, activeOnglet.libelle) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 73\n      }\n    }, \"NADA\"))), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, activeOnglet ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 37\n      }\n    }, activeOnglet.description) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 73\n      }\n    }, \"NADA\")), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: props.onHide,\n      className: \"btn-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, \"Fermer\")));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }\n  }, \"R\\xE8gles investisseur\"), props.ResultatProfil === 5 ? /*#__PURE__*/React.createElement(For, {\n    of: allRegles,\n    as: onglet => /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"bloc-btn\",\n      onClick: () => {\n        setModalShow(true);\n        getOnglet(onglet);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }, truncate(onglet.libelle))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 22\n    }\n  }) : /*#__PURE__*/React.createElement(For, {\n    of: allRegles.filter(regle => regle.id !== 9 || regle.id !== 10 || regle.id !== 11 || regle.id !== 12 || regle.id !== 13 || regle.id !== 14),\n    as: onglet => /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"bloc-btn\",\n      onClick: () => {\n        setModalShow(true);\n        getOnglet(onglet);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }\n    }, truncate(onglet.libelle))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 22\n    }\n  }), /*#__PURE__*/React.createElement(MydModalWithGrid, {\n    show: modalShow,\n    onHide: () => setModalShow(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default ModalProfil;","map":{"version":3,"sources":["C:/Perso/profiler_2.0/front/src/components/modals/regles.modal.js"],"names":["React","useState","useEffect","For","Modal","Button","ConseilDataService","ModalProfil","props","allRegles","setAllRegles","allTradersRegles","setAllTradersRegles","activeOnglet","setActiveOnglet","modalShow","setModalShow","getAllRegles","getOnglet","onglet","getAll","then","response","data","console","log","catch","e","truncate","text","length","substring","MydModalWithGrid","libelle","description","onHide","ResultatProfil","width","filter","regle","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { For } from 'react-loops'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport ConseilDataService from '../../services/ConseilServices'\r\n\r\nconst ModalProfil = props => {\r\n\r\n    const [allRegles, setAllRegles] = useState([])\r\n    const [allTradersRegles, setAllTradersRegles] = useState([])\r\n    const [activeOnglet, setActiveOnglet] = useState()\r\n    const [modalShow, setModalShow] = useState(false)\r\n\r\n    useEffect(() => {\r\n        getAllRegles()\r\n    }, [])\r\n\r\n    const getOnglet = (onglet) => {\r\n        setActiveOnglet(onglet)\r\n    }\r\n\r\n    const getAllRegles = () => {\r\n        ConseilDataService.getAll()\r\n            .then(response => {\r\n                setAllRegles(response.data)\r\n                console.log(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const truncate = (text) => {\r\n        return text.length > 60 ? text.substring(0, 60) + \"...\" : text;\r\n    }\r\n\r\n    const MydModalWithGrid = props => {\r\n        return (\r\n            <Modal {...props}\r\n                dialogClassName=\"modal-bloc\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        {activeOnglet ? <p>{activeOnglet.libelle}</p> : <p>NADA</p>}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {activeOnglet ? <p>{activeOnglet.description}</p> : <p>NADA</p>}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"btn-close\">Fermer</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <>\r\n                <p>Règles investisseur</p>\r\n                {props.ResultatProfil === 5 ?\r\n                    (<For of={allRegles} as={onglet =>\r\n                        <div style={{ width: '100%' }}>\r\n                            <Button className=\"bloc-btn\" onClick={() => {\r\n                                setModalShow(true);\r\n                                getOnglet(onglet)\r\n                            }}>\r\n                                {truncate(onglet.libelle)}\r\n                            </Button>\r\n                        </div>\r\n                    } />) :\r\n                    (<For of={allRegles.filter(regle => regle.id !== 9 ||\r\n                        regle.id !== 10 || \r\n                        regle.id !== 11 || \r\n                        regle.id !== 12 || \r\n                        regle.id !== 13 ||\r\n                        regle.id !== 14)} as={onglet =>\r\n                        <div style={{ width: '100%' }}>\r\n                            <Button className=\"bloc-btn\" onClick={() => {\r\n                                setModalShow(true);\r\n                                getOnglet(onglet)\r\n                            }}>\r\n                                {truncate(onglet.libelle)}\r\n                            </Button>\r\n                        </div>\r\n                    } />)}\r\n\r\n                <MydModalWithGrid show={modalShow} onHide={() => setModalShow(false)} />\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n"]},"metadata":{},"sourceType":"module"}