{"ast":null,"code":"var _jsxFileName = \"C:\\\\Perso\\\\profiler_2.0\\\\front\\\\src\\\\components\\\\Question.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Proposition from \"./Proposition\";\nimport \"./Question.css\";\nimport ReactDOM from 'react-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons';\n\nconst Question = props => {\n  const initialQuestionState = {\n    id: props.listQuestion[0].id,\n    libelle: props.listQuestion[0].libelle\n  };\n  const [currentQuestion, setCurrentQuestion] = useState(initialQuestionState);\n  const [indexQuestion, setIndexQuestion] = useState(0); // const [indexQuestion, setIndexQuestion] = useState(24);\n\n  const [pourcentageBar, setPourcentageBar] = useState(0);\n  useEffect(() => setCurrentQuestion(props.listQuestion[indexQuestion], []));\n\n  const setIndex = () => {\n    setPourcentageBar(progressPercent);\n    setIndexQuestion(indexQuestion + 1);\n  };\n\n  const backPreviousIndex = () => {\n    setPourcentageBar(progressPercent);\n    setIndexQuestion(indexQuestion - 1);\n  };\n\n  const displayProfil = () => {\n    props.displayProfil();\n  };\n\n  const setProfil = propal => {\n    console.log(propal.proposition);\n  };\n\n  const progressPercent = (indexQuestion + 1) * 100 / (props.listQuestion.length - 1);\n\n  if (!currentQuestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, displayProfil());\n  }\n\n  if (currentQuestion) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"question-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar progress-bar-striped progress-bar-animated\",\n      style: {\n        width: pourcentageBar + '%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    }, \"Question \", indexQuestion + 1, \" sur \", props.listQuestion.length)), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"titre-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, currentQuestion.libelle), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"indexQuestion\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Proposition, {\n      setProfil: setProfil,\n      setIndexHandler: setIndex,\n      idQuestion: currentQuestion.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  }\n};\n\nexport default Question;","map":{"version":3,"sources":["C:/Perso/profiler_2.0/front/src/components/Question.js"],"names":["React","useState","useEffect","Proposition","ReactDOM","FontAwesomeIcon","faArrowLeft","Question","props","initialQuestionState","id","listQuestion","libelle","currentQuestion","setCurrentQuestion","indexQuestion","setIndexQuestion","pourcentageBar","setPourcentageBar","setIndex","progressPercent","backPreviousIndex","displayProfil","setProfil","propal","console","log","proposition","length","width"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Proposition from \"./Proposition\";\r\nimport \"./Question.css\"\r\n\r\nimport ReactDOM from 'react-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Question = props => {\r\n\r\n  const initialQuestionState = {\r\n    id: props.listQuestion[0].id,\r\n    libelle: props.listQuestion[0].libelle\r\n  };\r\n  const [currentQuestion, setCurrentQuestion] = useState(initialQuestionState);\r\n  const [indexQuestion, setIndexQuestion] = useState(0);\r\n  // const [indexQuestion, setIndexQuestion] = useState(24);\r\n  const [pourcentageBar, setPourcentageBar] = useState(0)\r\n\r\n  useEffect(() =>\r\n    setCurrentQuestion(props.listQuestion[indexQuestion], [])\r\n  )\r\n\r\n  const setIndex = () => {\r\n    setPourcentageBar(progressPercent)\r\n    setIndexQuestion(indexQuestion + 1)\r\n    \r\n  }\r\n\r\n  const backPreviousIndex = () => {\r\n    setPourcentageBar(progressPercent)\r\n    setIndexQuestion(indexQuestion - 1)\r\n  }\r\n\r\n  const displayProfil = () => {\r\n    props.displayProfil();\r\n  }\r\n\r\n  const setProfil = (propal) => {\r\n    console.log(propal.proposition)\r\n  }\r\n\r\n  const progressPercent = ((indexQuestion+1) * 100) / (props.listQuestion.length -1)\r\n\r\n\r\n  if (!currentQuestion) {\r\n    return (\r\n      <div>\r\n        {displayProfil()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (currentQuestion) {\r\n    \r\n    return (\r\n      \r\n      <div className=\"question-container\">\r\n        \r\n        <div className=\"progress\">\r\n          <div className=\"progress-bar progress-bar-striped progress-bar-animated\" style={{width: pourcentageBar+'%'}}>\r\n          Question {indexQuestion+1} sur {props.listQuestion.length}\r\n          </div>\r\n        </div>\r\n        <h3 className=\"titre-question\">{currentQuestion.libelle}</h3>\r\n        <div className=\"indexQuestion\"></div>\r\n        <Proposition\r\n          setProfil={setProfil}\r\n          setIndexHandler={setIndex}\r\n          idQuestion={currentQuestion.id}\r\n        />\r\n        {/* <br/>\r\n        <FontAwesomeIcon icon={faArrowLeft}\r\n        onClick={backPreviousIndex} /> */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n};\r\n\r\nexport default Question;\r\n"]},"metadata":{},"sourceType":"module"}