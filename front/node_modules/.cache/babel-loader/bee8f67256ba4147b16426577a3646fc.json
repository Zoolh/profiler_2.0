{"ast":null,"code":"var _jsxFileName = \"C:\\\\Perso\\\\profiler_2.0\\\\front\\\\src\\\\components\\\\Questionnaire.js\";\nimport React, { useState, useEffect } from \"react\";\nimport QuestionDataService from \"../services/QuestionService\";\nimport Question from \"../components/Question\";\nimport Profil from \"../components/Profil\";\nimport ProfilDataService from \"../services/ProfilService\";\nimport Accueil from \"../components/Accueil\";\nimport './Questionnaire.css';\n\nconst Questionnaire = props => {\n  const [listQuestions, setListQuestions] = useState();\n  const [target, setTarget] = useState(\"accueil\");\n  const [listeBlocs, setListeBlocs] = useState();\n\n  const getListQuestions = () => {\n    QuestionDataService.getAll().then(response => {\n      setListQuestions(response.data);\n      setTarget(\"questionnaire\");\n    }).catch(e => {\n      console.log(e.response);\n    });\n  };\n\n  const getAllBloc = () => {\n    ProfilDataService.getAllBlocs().then(response => {\n      setListeBlocs(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  useEffect(() => getAllBloc(), [target === \"profil\"]);\n\n  const displayProfil = () => {\n    setTarget(\"profil\");\n  };\n\n  if (target === \"profil\") {\n    return /*#__PURE__*/React.createElement(Profil, {\n      listeBlocs: listeBlocs,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    });\n  }\n\n  if (target === \"accueil\") {\n    return /*#__PURE__*/React.createElement(Accueil, {\n      startQuestionnaire: getListQuestions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    });\n  }\n\n  if (target === \"questionnaire\") {\n    return /*#__PURE__*/React.createElement(Question, {\n      listQuestion: listQuestions,\n      displayProfil: displayProfil,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    });\n  }\n};\n\nexport default Questionnaire;","map":{"version":3,"sources":["C:/Perso/profiler_2.0/front/src/components/Questionnaire.js"],"names":["React","useState","useEffect","QuestionDataService","Question","Profil","ProfilDataService","Accueil","Questionnaire","props","listQuestions","setListQuestions","target","setTarget","listeBlocs","setListeBlocs","getListQuestions","getAll","then","response","data","catch","e","console","log","getAllBloc","getAllBlocs","displayProfil"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,mBAAP,MAAgC,6BAAhC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,iBAAP,MAA8B,2BAA9B;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAO,qBAAP;;AAEA,MAAMC,aAAa,GAAGC,KAAK,IAAI;AAE7B,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCV,QAAQ,EAAlD;AACA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBZ,QAAQ,CAAC,SAAD,CAApC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,EAA5C;;AAEA,QAAMe,gBAAgB,GAAG,MAAM;AAC7Bb,IAAAA,mBAAmB,CAACc,MAApB,GACGC,IADH,CACQC,QAAQ,IAAI;AAChBR,MAAAA,gBAAgB,CAACQ,QAAQ,CAACC,IAAV,CAAhB;AACAP,MAAAA,SAAS,CAAC,eAAD,CAAT;AACD,KAJH,EAKGQ,KALH,CAKSC,CAAC,IAAI;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACH,QAAd;AACD,KAPH;AAQD,GATD;;AAWA,QAAMM,UAAU,GAAG,MAAM;AACvBnB,IAAAA,iBAAiB,CAACoB,WAAlB,GACCR,IADD,CACMC,QAAQ,IAAI;AACdJ,MAAAA,aAAa,CAACI,QAAQ,CAACC,IAAV,CAAb;AACH,KAHD,EAICC,KAJD,CAIOC,CAAC,IAAI;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH,KAND;AAOH,GARC;;AAUApB,EAAAA,SAAS,CAAC,MAAMuB,UAAU,EAAjB,EAAqB,CAACb,MAAM,KAAK,QAAZ,CAArB,CAAT;;AAEA,QAAMe,aAAa,GAAG,MAAM;AAC1Bd,IAAAA,SAAS,CAAC,QAAD,CAAT;AACD,GAFD;;AAKA,MAAID,MAAM,KAAK,QAAf,EAAyB;AACvB,wBACE,oBAAC,MAAD;AACE,MAAA,UAAU,EAAEE,UADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAID;;AAED,MAAIF,MAAM,KAAK,SAAf,EAA0B;AACxB,wBACE,oBAAC,OAAD;AACE,MAAA,kBAAkB,EAAEI,gBADtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAID;;AAED,MAAIJ,MAAM,KAAK,eAAf,EAAgC;AAC9B,wBACE,oBAAC,QAAD;AACE,MAAA,YAAY,EAAEF,aADhB;AAEE,MAAA,aAAa,EAAEiB,aAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAKD;AACF,CAvDD;;AA2DA,eAAenB,aAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport QuestionDataService from \"../services/QuestionService\"\r\nimport Question from \"../components/Question\"\r\nimport Profil from \"../components/Profil\"\r\nimport ProfilDataService from \"../services/ProfilService\"\r\nimport Accueil from \"../components/Accueil\"\r\nimport './Questionnaire.css'\r\n\r\nconst Questionnaire = props => {\r\n\r\n  const [listQuestions, setListQuestions] = useState();\r\n  const [target, setTarget] = useState(\"accueil\");\r\n  const [listeBlocs, setListeBlocs] = useState()\r\n\r\n  const getListQuestions = () => {\r\n    QuestionDataService.getAll()\r\n      .then(response => {\r\n        setListQuestions(response.data);\r\n        setTarget(\"questionnaire\")\r\n      })\r\n      .catch(e => {\r\n        console.log(e.response)\r\n      })\r\n  }\r\n\r\n  const getAllBloc = () => {\r\n    ProfilDataService.getAllBlocs()\r\n    .then(response => {\r\n        setListeBlocs(response.data)\r\n    })\r\n    .catch(e => {\r\n        console.log(e)\r\n    })\r\n}\r\n\r\n  useEffect(() => getAllBloc(), [target === \"profil\"])\r\n\r\n  const displayProfil = () => {\r\n    setTarget(\"profil\")\r\n  }\r\n\r\n\r\n  if (target === \"profil\") {\r\n    return (\r\n      <Profil\r\n        listeBlocs={listeBlocs} />\r\n    )\r\n  }\r\n\r\n  if (target === \"accueil\") {\r\n    return (\r\n      <Accueil\r\n        startQuestionnaire={getListQuestions} />\r\n    )\r\n  }\r\n  \r\n  if (target === \"questionnaire\") {\r\n    return (\r\n      <Question\r\n        listQuestion={listQuestions}\r\n        displayProfil={displayProfil} />\r\n    )\r\n  }\r\n};\r\n\r\n\r\n\r\nexport default Questionnaire;\r\n"]},"metadata":{},"sourceType":"module"}