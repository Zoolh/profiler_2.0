{"ast":null,"code":"var _jsxFileName = \"C:\\\\Perso\\\\profiler_2.0\\\\front\\\\src\\\\components\\\\Profil.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { For } from 'react-loops';\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Modal from 'react-bootstrap/Modal';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport ProfilDataService from '../services/ProfilService';\nimport { useSelector } from \"react-redux\";\nimport './Profil.css';\n\nconst Profil = props => {\n  const [listeOptions, setListeOptions] = useState(0);\n  const [modalShow, setModalShow] = useState(false);\n  const [activeOnglet, setActiveOnglet] = useState();\n  const listeOnglets = ['toto', 'titi'];\n  const nbPointProfil = useSelector(state => {\n    return state.profil.point;\n  });\n  const nbQuestionProfil = useSelector(state => {\n    return state.profil.nbReponses;\n  });\n\n  const getActiveBloc = onglet => {\n    setActiveOnglet(onglet); // getOptions(bloc.id)\n    // console.log(listeOptions)\n  };\n\n  const getOptions = id => {\n    ProfilDataService.getOptionsByBloc(id).then(response => {\n      setListeOptions(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const ResultatProfil = Number((nbPointProfil / nbQuestionProfil).toFixed(0));\n\n  const MydModalWithGrid = props => {\n    return /*#__PURE__*/React.createElement(Modal, Object.assign({}, props, {\n      dialogClassName: \"modal-bloc\",\n      \"aria-labelledby\": \"contained-modal-title-vcenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      id: \"contained-modal-title-vcenter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }\n    }, activeOnglet ? /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 41\n      }\n    }, activeOnglet) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 65\n      }\n    }, \"NADA\"))), /*#__PURE__*/React.createElement(Modal.Body, {\n      className: \"modal-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Container, {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      className: \"show-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 12,\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 29\n      }\n    }, \"Liste :\", listeOptions ? /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(For, {\n      of: listeOptions,\n      as: option => /*#__PURE__*/React.createElement(\"li\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 45\n        }\n      }, option.libelle),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 41\n      }\n    })) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 39\n      }\n    }, \"NADA\")), /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, \"Liens utiles :\")), /*#__PURE__*/React.createElement(Row, {\n      className: \"show-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Col, {\n      xs: 6,\n      md: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 29\n      }\n    })))), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: props.onHide,\n      className: \"btn-close\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, \"Fermer\")));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, \"RESULTATS\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, \"Profil n\\xB0 : \", ResultatProfil), /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(For, {\n    of: listeCard,\n    as: bloc => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"resultCard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: \"bloc-btn\",\n      onClick: () => {\n        setModalShow(true);\n        getActiveBloc(bloc);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, \"salut\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(MydModalWithGrid, {\n    show: modalShow,\n    onHide: () => setModalShow(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default Profil;","map":{"version":3,"sources":["C:/Perso/profiler_2.0/front/src/components/Profil.js"],"names":["React","useState","useEffect","For","useAccordionToggle","Accordion","Card","Modal","Container","Row","Col","Button","ProfilDataService","useSelector","Profil","props","listeOptions","setListeOptions","modalShow","setModalShow","activeOnglet","setActiveOnglet","listeOnglets","nbPointProfil","state","profil","point","nbQuestionProfil","nbReponses","getActiveBloc","onglet","getOptions","id","getOptionsByBloc","then","response","data","catch","e","console","log","ResultatProfil","Number","toFixed","MydModalWithGrid","option","libelle","onHide","listeCard","bloc"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { For } from 'react-loops'\r\nimport { useAccordionToggle } from 'react-bootstrap/AccordionToggle';\r\nimport Accordion from 'react-bootstrap/Accordion'\r\nimport Card from 'react-bootstrap/Card'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button'\r\nimport ProfilDataService from '../services/ProfilService'\r\nimport { useSelector } from \"react-redux\";\r\nimport './Profil.css'\r\n\r\nconst Profil = props => {\r\n\r\n    const [listeOptions, setListeOptions] = useState(0)\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [activeOnglet, setActiveOnglet] = useState()\r\n\r\n    const listeOnglets = ['toto', 'titi']\r\n\r\n    const nbPointProfil = useSelector((state) => {\r\n        return state.profil.point   \r\n    });\r\n  \r\n    const nbQuestionProfil = useSelector((state) => {\r\n      return state.profil.nbReponses\r\n      \r\n    });\r\n\r\n    const getActiveBloc = (onglet) => {\r\n        setActiveOnglet(onglet)\r\n        // getOptions(bloc.id)\r\n        // console.log(listeOptions)\r\n\r\n    }\r\n\r\n    const getOptions = (id) => {\r\n        ProfilDataService.getOptionsByBloc(id)\r\n            .then(response => {\r\n                setListeOptions(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const ResultatProfil = Number((nbPointProfil / nbQuestionProfil).toFixed(0));\r\n\r\n\r\n    const MydModalWithGrid = props => {\r\n        return (\r\n            <Modal {...props}\r\n                dialogClassName=\"modal-bloc\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        {activeOnglet ? <p>{activeOnglet}</p> : <p>NADA</p>}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body className=\"modal-body\">\r\n                    <Container className=\"container\">\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={12} md={8}>\r\n                                Liste :\r\n                                {listeOptions ?\r\n                                    <ul>\r\n                                        <For of={listeOptions} as={option =>\r\n                                            <li>{option.libelle}</li>\r\n                                        } />\r\n                                    </ul>\r\n                                    : <p>NADA</p>}\r\n\r\n                                {/* <code>.col-xs-12 .col-md-8</code> */}\r\n                            </Col>\r\n                            <Col xs={6} md={4}>\r\n                                Liens utiles :\r\n                                {/* <code>.col-xs-6 .col-md-4</code> */}\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        <Row className=\"show-grid\">\r\n                            <Col xs={6} md={4}>\r\n                                {/* <code>.col-xs-6 .col-md-4</code> */}\r\n                            </Col>\r\n                            <Col xs={6} md={4}>\r\n                                {/* <code>.col-xs-6 .col-md-4</code> */}\r\n                            </Col>\r\n                            <Col xs={6} md={4}>\r\n                                {/* <code>.col-xs-6 .col-md-4</code> */}\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"btn-close\">Fermer</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>RESULTATS</h1>\r\n    <p>Profil n° : {ResultatProfil}</p>\r\n        <>\r\n            <For of={listeCard} as={bloc =>\r\n                <div className=\"resultCard\">\r\n                    <Button className=\"bloc-btn\" onClick={() => {\r\n                        setModalShow(true);\r\n                        getActiveBloc(bloc)\r\n                    }}>\r\n                        {/* {bloc.libelle} */}salut\r\n                    </Button>\r\n                </div>\r\n            } />\r\n            <MydModalWithGrid show={modalShow} onHide={() => setModalShow(false)} />\r\n        </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profil;"]},"metadata":{},"sourceType":"module"}