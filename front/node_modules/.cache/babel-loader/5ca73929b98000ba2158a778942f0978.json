{"ast":null,"code":"var _jsxFileName = \"C:\\\\Perso\\\\profiler_2.0\\\\front\\\\src\\\\components\\\\modals\\\\profil.modal.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ProfilDataService from '../../services/ProfilService';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst ModalProfil = props => {\n  const useStyles = makeStyles({\n    root: {\n      minWidth: 275,\n      marginBottom: 10 // backgroundColor: 'green'\n\n    },\n    bullet: {\n      display: 'inline-block',\n      margin: '0 2px',\n      transform: 'scale(0.8)'\n    },\n    title: {\n      fontSize: 14\n    },\n    pos: {\n      marginBottom: 12\n    }\n  });\n  const initialStateProfil = {\n    id: null,\n    libelle: \"\",\n    temps: \"\",\n    variation: \"\",\n    actif_profil: [],\n    conseil_profil: [],\n    description: \"\"\n  };\n  const [profil, setProfil] = useState(initialStateProfil);\n  const [allProfils, setAllProfils] = useState([]);\n  const classes = useStyles();\n  useEffect(() => {\n    getProfil();\n    getAllProfil();\n  }, []);\n\n  const getProfil = () => {\n    ProfilDataService.getById(props.ResultatProfil).then(response => {\n      setProfil({\n        id: response.data.id,\n        libelle: response.data.libelle,\n        temps: response.data.temps,\n        variation: response.data.variation,\n        actif_profil: response.data.actif_profil,\n        description: response.data.description\n      });\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  const getAllProfil = () => {\n    ProfilDataService.getAll().then(response => {\n      setAllProfils(response.data);\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, \"Vos r\\xE9ponses permettent de d\\xE9terminer que vous pouvez opter pour un niveau de risque\"), allProfils.map((p, key) => {\n    return /*#__PURE__*/React.createElement(Card, {\n      key: key,\n      className: classes.root,\n      style: {\n        backgroundColor: p.libelle === profil.libelle ? 'LightBlue' : null\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      className: classes.title,\n      color: \"textSecondary\",\n      gutterBottom: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, p.libelle), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      component: \"p\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 29\n      }\n    }, \"Variation moyenne annuelle cible : \", p.variation, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 33\n      }\n    }), \"Temps \\xE0 y consacrer (Sauf gestion d\\xE9l\\xE9gu\\xE9e) : \", p.temps, profil.libelle === \"Trader\" && p.libelle === \"Trader\" ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 38\n      }\n    }, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 41\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 41\n      }\n    }, \"Vos r\\xE9ponses permettent de d\\xE9terminer qu'en plus de votre profil d'investisseur vous pouvez envisager le profil Trader\")) : null)));\n  }));\n};\n\nexport default ModalProfil;","map":{"version":3,"sources":["C:/Perso/profiler_2.0/front/src/components/modals/profil.modal.js"],"names":["React","useState","useEffect","ProfilDataService","makeStyles","Card","CardContent","Typography","ModalProfil","props","useStyles","root","minWidth","marginBottom","bullet","display","margin","transform","title","fontSize","pos","initialStateProfil","id","libelle","temps","variation","actif_profil","conseil_profil","description","profil","setProfil","allProfils","setAllProfils","classes","getProfil","getAllProfil","getById","ResultatProfil","then","response","data","catch","e","console","log","getAll","map","p","key","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ProfilDataService from '../../services/ProfilService'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nconst ModalProfil = props => {\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n            marginBottom: 10,\r\n            // backgroundColor: 'green'\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n    const initialStateProfil = {\r\n        id: null,\r\n        libelle: \"\",\r\n        temps: \"\",\r\n        variation: \"\",\r\n        actif_profil: [],\r\n        conseil_profil: [],\r\n        description: \"\"\r\n    };\r\n\r\n    const [profil, setProfil] = useState(initialStateProfil);\r\n    const [allProfils, setAllProfils] = useState([]);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        getProfil()\r\n        getAllProfil()\r\n    }, [])\r\n\r\n    const getProfil = () => {\r\n        ProfilDataService.getById(props.ResultatProfil)\r\n            .then(response => {\r\n                setProfil({\r\n                    id: response.data.id,\r\n                    libelle: response.data.libelle,\r\n                    temps: response.data.temps,\r\n                    variation: response.data.variation,\r\n                    actif_profil: response.data.actif_profil,\r\n                    description: response.data.description\r\n                });\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const getAllProfil = () => {\r\n        ProfilDataService.getAll()\r\n            .then(response => {\r\n                setAllProfils(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                Vos réponses permettent de déterminer que vous pouvez opter pour un niveau de risque\r\n            </div>\r\n            {allProfils.map((p, key) => {\r\n                return (\r\n                    <Card key={key} className={classes.root} style={{ backgroundColor: (p.libelle === profil.libelle) ? 'LightBlue' : null }}>\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                {p.libelle}\r\n                            </Typography>\r\n\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                Variation moyenne annuelle cible : {p.variation}\r\n                                <br />\r\n                                Temps à y consacrer (Sauf gestion déléguée) : {p.temps}\r\n                                {profil.libelle === \"Trader\" && p.libelle === \"Trader\" ?\r\n                                    (<div>\r\n                                        <br />\r\n                                        <p>Vos réponses permettent de déterminer qu'en plus de votre profil d'investisseur vous pouvez envisager le profil Trader</p>\r\n                                    </div>) :\r\n                                    (null)}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n"]},"metadata":{},"sourceType":"module"}