{"version":3,"sources":["http-common.js","services/QuestionService.js","services/PropositionService.js","components/Proposition.js","actions/profilAction.js","constants/profilActionTypes.js","actions/gestionAction.js","actions/supportAction.js","components/Question.js","services/ProfilService.js","components/modals/profil.modal.js","services/TypeGestionServices.js","components/modals/gestion.modal.js","services/ActifServices.js","components/modals/marche.modal.js","components/modals/plusLoin.modal.js","services/ConseilServices.js","components/modals/regles.modal.js","services/SupportInvServices.js","components/modals/support.modal.js","components/Profil.js","components/Accueil.js","App.js","serviceWorker.js","reducers/profilReducer.js","reducers/gestionReducer.js","reducers/supportReducer.js","reducers/index.js","index.js"],"names":["axios","create","baseURL","headers","http","get","idQuestion","params","id","Proposition","props","dispatch","useDispatch","useState","listePropositions","setListePropositions","useEffect","getListPropositions","PropositionDataService","then","response","data","catch","e","console","log","className","of","as","proposition","onClick","pointsProfil","type","pointProfil","pointsTypeGestion","pointGestion","propositionId","setIndexHandler","nextQuestion","libelle","Question","initialQuestionState","listQuestion","currentQuestion","setCurrentQuestion","indexQuestion","setIndexQuestion","pourcentageBar","setPourcentageBar","progressPercent","length","style","width","displayProfil","ModalProfil","useStyles","makeStyles","root","minWidth","marginBottom","bullet","display","margin","transform","title","fontSize","pos","temps","variation","actif_profil","conseil_profil","description","profil","setProfil","allProfils","setAllProfils","classes","getProfil","getAllProfil","ProfilDataService","ResultatProfil","map","p","key","Card","backgroundColor","CardContent","Typography","color","gutterBottom","variant","component","typeGestion","setTypeGestion","allTypesGestion","setAllTypesGestion","GestionDataService","ResultatGestion","g","idProfil","post","actifSelected","setActifSelected","getActifSelected","ActifsDataService","TableContainer","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","a","scope","ponderation","produit_actif","allRegles","setAllRegles","activeOnglet","setActiveOnglet","modalShow","setModalShow","getAllRegles","getOnglet","onglet","ConseilDataService","truncate","text","substring","MydModalWithGrid","Modal","dialogClassName","aria-labelledby","Header","closeButton","Title","Body","Footer","Button","onHide","filter","regle","show","idProposition","listeSupports","setListeSupports","allSupports","setAllSupports","getListeSupport","getAllSupports","SupportDataService","IdPropositionSupport","s","equals","some","el","href","target","Profil","nbPointProfil","useSelector","state","point","nbQuestionProfil","nbReponses","Number","toFixed","nbPointGestion","gestion","nbQuestionGestion","support","propositionSelected","Accueil","listQuestions","setListQuestions","setTarget","QuestionDataService","App","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","store","createStore","reducer","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4ed53411.chunk.js","sourcesContent":["// File crée manuellement, suite npm install axios.\r\n// Gère la connexion générale à l'API.\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  \r\n  // baseURL: \"http://localhost:8080/api\",\r\n  baseURL: \"https://profiler-prod.herokuapp.com/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/questions\");\r\n  \r\n};\r\n\r\nconst get = id => {\r\n  return http.get(`/questions/${id}`);\r\n};\r\n\r\n\r\n\r\nexport default {\r\n  getAll,\r\n  get\r\n};\r\n","import http from \"../http-common\";\r\n\r\nconst getAllByIdQuestion = idQuestion => {\r\n  return http.get(\"/propositions/getByQuestions\", {\r\n      params: {\r\n          id: idQuestion\r\n      }\r\n    });\r\n};\r\n\r\n\r\nconst get = id => {\r\n  return http.get(`/propositions/${id}`);\r\n};\r\n\r\n\r\n\r\nexport default {\r\n  getAllByIdQuestion,\r\n  get\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { For } from 'react-loops'\r\nimport PropositionDataService from '../services/PropositionService'\r\nimport { incrementPointProfil, incrementReponse } from '../actions/profilAction'\r\nimport \"./Proposition.css\"\r\nimport { incrementPointGestion, incrementReponseGestion } from \"../actions/gestionAction\";\r\nimport { setSelectedProposition } from '../actions/supportAction';\r\n\r\n\r\nconst Proposition = props => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [listePropositions, setListePropositions] = useState();\r\n\r\n  useEffect(() => getListPropositions(), [props.idQuestion])\r\n\r\n  const getListPropositions = () => {\r\n    PropositionDataService.getAllByIdQuestion(props.idQuestion)\r\n      .then(response => {\r\n        setListePropositions(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e)\r\n      })\r\n  }\r\n\r\n  const nextQuestion = (proposition) => {\r\n    if (proposition.pointsProfil) {\r\n      dispatch(incrementReponse())\r\n      dispatch(incrementPointProfil(proposition.pointsProfil))\r\n    }\r\n    if (proposition.pointsTypeGestion) {\r\n      dispatch(incrementReponseGestion())\r\n      dispatch(incrementPointGestion(proposition.pointsTypeGestion))\r\n    }\r\n    if (proposition.id == 38 || proposition.id == 39 || proposition.id == 40 || proposition.id == 41) {\r\n      dispatch(setSelectedProposition(proposition.id))\r\n    }\r\n    props.setIndexHandler()\r\n  }\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"list-group list-group-flush proposition-container \" >\r\n      <For of={listePropositions} as={proposition =>\r\n        <div className=\"list-group-item proposition-card\"\r\n          onClick={(e) => nextQuestion(proposition)}\r\n        >\r\n          {proposition.libelle}\r\n        </div>\r\n\r\n      } />\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Proposition;\r\n","import * as types from \"../constants/profilActionTypes\";\r\n\r\n\r\nexport const incrementPointProfil = (pointProfil) => ({\r\n    type: types.ADD_POINT_PROFIL,\r\n    pointProfil : pointProfil\r\n});\r\n\r\nexport const incrementReponse = () => ({\r\n    type: types.ADD_RESPONSE_COUNT\r\n});\r\n\r\n","export const ADD_POINT_PROFIL = 'ADD_POINT_PROFIL'\r\nexport const ADD_POINT_GESTION = 'ADD_POINT_GESTION'\r\n\r\nexport const ADD_RESPONSE_GESTION_COUNT = 'ADD_RESPONSE_GESTION_COUNT'\r\nexport const ADD_RESPONSE_COUNT  = 'ADD_RESPONSE_COUNT'\r\n\r\nexport const SET_PROPOSITION_SELECTED  = 'SET_PROPOSITION_SELECTED'\r\n","import * as types from \"../constants/profilActionTypes\";\r\n\r\n\r\nexport const incrementPointGestion = (pointGestion) => ({\r\n    type: types.ADD_POINT_GESTION,\r\n    pointGestion : pointGestion\r\n});\r\n\r\nexport const incrementReponseGestion = () => ({\r\n    type: types.ADD_RESPONSE_GESTION_COUNT\r\n});\r\n\r\n","import * as types from \"../constants/profilActionTypes\";\r\n\r\n\r\nexport const setSelectedProposition = (propositionId) => ({\r\n    type: types.SET_PROPOSITION_SELECTED,\r\n    propositionId : propositionId\r\n});\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Proposition from \"./Proposition\";\r\nimport { useSelector } from \"react-redux\";\r\nimport \"./Question.css\"\r\n\r\nimport ReactDOM from 'react-dom'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst Question = props => {\r\n\r\n  const initialQuestionState = {\r\n    id: props.listQuestion[0].id,\r\n    libelle: props.listQuestion[0].libelle\r\n  };\r\n  const [currentQuestion, setCurrentQuestion] = useState(initialQuestionState);\r\n  // const [indexQuestion, setIndexQuestion] = useState(19);\r\n  const [indexQuestion, setIndexQuestion] = useState(0);\r\n  const [pourcentageBar, setPourcentageBar] = useState(0)\r\n\r\n  useEffect(() =>\r\n    setCurrentQuestion(props.listQuestion[indexQuestion], [indexQuestion])\r\n  )\r\n\r\n  const setIndex = () => {\r\n    setPourcentageBar(progressPercent)\r\n    setIndexQuestion(indexQuestion + 1)\r\n  }\r\n\r\n  const backPreviousIndex = () => {\r\n    setPourcentageBar(progressPercent)\r\n    setIndexQuestion(indexQuestion - 1)\r\n  }\r\n\r\n  const displayProfil = () => {\r\n    props.displayProfil();\r\n  }\r\n\r\n  const progressPercent = ((indexQuestion + 1) * 100) / (props.listQuestion.length - 1)\r\n\r\n\r\n  if (!currentQuestion) {\r\n    return (\r\n      <div>\r\n        {displayProfil()}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (currentQuestion) {\r\n\r\n    return (\r\n      <div className=\"question-container\">\r\n        <div className=\"progress\">\r\n          <div className=\"progress-bar progress-bar-striped progress-bar-animated\" style={{ width: pourcentageBar + '%' }}>\r\n            Question {indexQuestion + 1} sur {props.listQuestion.length}\r\n          </div>\r\n        </div>\r\n        <h3 className=\"titre-question\">{currentQuestion.libelle}</h3>\r\n        <div className=\"indexQuestion\"></div>\r\n        <Proposition\r\n          setIndexHandler={setIndex}\r\n          idQuestion={currentQuestion.id}\r\n        />\r\n        <br />\r\n        {/* <FontAwesomeIcon icon={faArrowLeft}\r\n          onClick={backPreviousIndex} /> */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n};\r\n\r\nexport default Question;\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/profils\");\r\n};\r\n\r\nconst getById = id => {\r\n  return http.get(`/profils/${id}`);  \r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  getById\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ProfilDataService from '../../services/ProfilService'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\nconst ModalProfil = props => {\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n            marginBottom: 10,\r\n            // backgroundColor: 'green'\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n    const initialStateProfil = {\r\n        id: null,\r\n        libelle: \"\",\r\n        temps: \"\",\r\n        variation: \"\",\r\n        actif_profil: [],\r\n        conseil_profil: [],\r\n        description: \"\"\r\n    };\r\n\r\n    const [profil, setProfil] = useState(initialStateProfil);\r\n    const [allProfils, setAllProfils] = useState([]);\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        getProfil()\r\n        getAllProfil()\r\n    }, [])\r\n\r\n    const getProfil = () => {\r\n        ProfilDataService.getById(props.ResultatProfil)\r\n            .then(response => {\r\n                setProfil({\r\n                    id: response.data.id,\r\n                    libelle: response.data.libelle,\r\n                    temps: response.data.temps,\r\n                    variation: response.data.variation,\r\n                    actif_profil: response.data.actif_profil,\r\n                    description: response.data.description\r\n                });\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const getAllProfil = () => {\r\n        ProfilDataService.getAll()\r\n            .then(response => {\r\n                setAllProfils(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                Vos réponses permettent de déterminer que vous pouvez opter pour un niveau de risque\r\n            </div>\r\n            {allProfils.map((p, key) => {\r\n                return (\r\n                    <Card key={key} className={classes.root} style={{ backgroundColor: (p.libelle === profil.libelle) ? 'LightGreen' : null }}>\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                {p.libelle}\r\n                            </Typography>\r\n\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                Variation moyenne annuelle cible : {p.variation}\r\n                                <br />\r\n                                Temps à y consacrer (Sauf gestion déléguée) : {p.temps}\r\n                                {profil.libelle === \"Trader\" && p.libelle === \"Trader\" ?\r\n                                    (<div>\r\n                                        <br />\r\n                                        <p>Vos réponses permettent de déterminer qu'en plus de votre profil d'investisseur vous pouvez envisager le profil Trader</p>\r\n                                    </div>) :\r\n                                    (null)}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n    return http.get(\"/typesGestion\");\r\n};\r\n\r\nconst getById = id => {\r\n    return http.get(`/typesGestion/${id}`);\r\n};\r\n\r\n\r\nexport default {\r\n    getAll,\r\n    getById\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport GestionDataService from '../../services/TypeGestionServices'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst ModalProfil = props => {\r\n\r\n    const initialTypeGestion = {\r\n        id: null,\r\n        libelle: \"\",\r\n        description: \"\"\r\n    }\r\n\r\n    const [typeGestion, setTypeGestion] = useState(initialTypeGestion)\r\n    const [allTypesGestion, setAllTypesGestion] = useState([])\r\n\r\n    const getAllTypesGestion = () => {\r\n        GestionDataService.getAll()\r\n            .then(response => {\r\n                setAllTypesGestion(response.data)\r\n                console.log(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const getTypeGestion = () => {\r\n        GestionDataService.getById(props.ResultatGestion)\r\n        .then(response => {\r\n            setTypeGestion({\r\n                id: response.data.id,\r\n                libelle: response.data.libelle,\r\n                description: response.data.description\r\n            });\r\n        })\r\n        .catch(e => {\r\n            console.log(e)\r\n        })\r\n    }\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n            marginBottom: 10,\r\n            // backgroundColor: 'green'\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        getAllTypesGestion()\r\n        getTypeGestion()\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div>\r\n            Vos réponses permettent de déterminer que vous pouvez opter pour une gestion\r\n            </div>\r\n            {allTypesGestion.map((g, key) => {\r\n                console.log(g)\r\n                return (\r\n                    <Card key={key} className={classes.root} style={{ backgroundColor: (g.libelle === typeGestion.libelle) ? 'LightGreen' : null }}>\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                {g.libelle}\r\n                            </Typography>\r\n\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                {g.description}\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n    return http.get(\"/actifs\");\r\n};\r\n\r\nconst getById = id => {\r\n    return http.get(`/actifs/${id}`);\r\n};\r\n\r\nconst getByProfilId = idProfil => {\r\n    const params = {\r\n        idProfil: idProfil\r\n    }\r\n    return http.post(\"/actifs/getByProfilId/\", { params });\r\n};\r\n\r\n\r\nexport default {\r\n    getAll,\r\n    getById,\r\n    getByProfilId\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ActifsDataService from '../../services/ActifServices'\r\nimport ProfilDataService from '../../services/ProfilService'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst ModalProfil = props => {\r\n\r\n    // const [allActifs, setAllActifs] = useState([])\r\n    const [actifSelected, setActifSelected] = useState([])\r\n    const [allProfils, setAllProfils] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getActifSelected()\r\n        getAllProfil()\r\n    }, [])\r\n\r\n    const getAllProfil = () => {\r\n        ProfilDataService.getAll()\r\n            .then(response => {\r\n                setAllProfils(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const getActifSelected = () => {\r\n        ActifsDataService.getByProfilId(props.ResultatProfil)\r\n            .then(response => {\r\n                setActifSelected(response.data)\r\n                // console.log(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n            marginBottom: 10,\r\n            // backgroundColor: 'green'\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n    const classes = useStyles();\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                Vos réponses permettent de déterminer que vous pouvez investir sur les marchés et produits suivants\r\n            </div>\r\n            {allProfils.map((p, key) => {\r\n                return (\r\n                    <Card key={key} className={classes.root} style={{ backgroundColor: (p.id === props.ResultatProfil) ? 'LightGreen' : null }}>\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                {p.libelle}\r\n                            </Typography>\r\n\r\n                            {p.id === props.ResultatProfil ?\r\n\r\n                                (<div>\r\n                                    <TableContainer component={Paper}>\r\n                                        <Table aria-label=\"simple table\">\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell>Types d'Actifs</TableCell>\r\n                                                    <TableCell align=\"left\">Pondération</TableCell>\r\n                                                    <TableCell align=\"left\">Produits</TableCell>\r\n                                                </TableRow>\r\n                                            </TableHead>\r\n                                            <TableBody>\r\n                                                {actifSelected.map((a, key) => (\r\n                                                    <TableRow key={key}>\r\n                                                        <TableCell component=\"th\" scope=\"row\">\r\n                                                            {a.libelle}\r\n                                                        </TableCell>\r\n                                                        <TableCell align=\"left\">{a.ponderation}</TableCell>\r\n                                                        <TableCell align=\"left\">{a.produit_actif.map((p, key) => {\r\n                                                            return(\r\n                                                                <div key={key}>{p.libelle}</div>\r\n                                                            )\r\n                                                        })}</TableCell>\r\n                                                    </TableRow>\r\n                                                ))}\r\n                                            </TableBody>\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                </div>) :\r\n                                (null)}\r\n\r\n                        </CardContent>\r\n                    </Card>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\n\r\nconst ModalProfil = props => {\r\n\r\n\r\n    return (\r\n\r\n        <div  >\r\n            DANS LE MODAL PLUS LOIN\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n    return http.get(\"/conseils\");\r\n};\r\n\r\nconst getById = id => {\r\n    return http.get(`/conseils/${id}`);\r\n};\r\n\r\n\r\nexport default {\r\n    getAll,\r\n    getById\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { For } from 'react-loops'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport ConseilDataService from '../../services/ConseilServices'\r\n\r\nconst ModalProfil = props => {\r\n\r\n    const [allRegles, setAllRegles] = useState([])\r\n    const [allTradersRegles, setAllTradersRegles] = useState([])\r\n    const [activeOnglet, setActiveOnglet] = useState()\r\n    const [modalShow, setModalShow] = useState(false)\r\n\r\n    useEffect(() => {\r\n        getAllRegles()\r\n    }, [])\r\n\r\n    const getOnglet = (onglet) => {\r\n        setActiveOnglet(onglet)\r\n    }\r\n\r\n    const getAllRegles = () => {\r\n        ConseilDataService.getAll()\r\n            .then(response => {\r\n                setAllRegles(response.data)\r\n                console.log(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const truncate = (text) => {\r\n        return text.length > 60 ? text.substring(0, 60) + \"...\" : text;\r\n    }\r\n\r\n    const MydModalWithGrid = props => {\r\n        return (\r\n            <Modal {...props}\r\n                dialogClassName=\"modal-bloc\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        {activeOnglet ? <p>{activeOnglet.libelle}</p> : <p>NADA</p>}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {activeOnglet ? <p>{activeOnglet.description}</p> : <p>NADA</p>}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"btn-close\">Fermer</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <div>\r\n            <>\r\n            <p>Voici les principales règles à connaître pour devenir un {props.ResultatProfil === 5 ? (\"Trader\") : (\"Investisseur\")} performant !</p>\r\n                {props.ResultatProfil === 5 ?\r\n                    (<For of={allRegles} as={onglet =>\r\n                        <div style={{ width: '100%' }}>\r\n                            <Button className=\"bloc-btn\" onClick={() => {\r\n                                setModalShow(true);\r\n                                getOnglet(onglet)\r\n                            }}>\r\n                                {truncate(onglet.libelle)}\r\n                            </Button>\r\n                        </div>\r\n                    } />) :\r\n                    (<For of={allRegles.filter(regle => regle.id != 9 &&\r\n                        regle.id != 10 && \r\n                        regle.id != 11 && \r\n                        regle.id != 12 && \r\n                        regle.id != 13 &&\r\n                        regle.id != 14)} as={onglet =>\r\n                        <div style={{ width: '100%' }}>\r\n                            <Button className=\"bloc-btn\" onClick={() => {\r\n                                setModalShow(true);\r\n                                getOnglet(onglet)\r\n                            }}>\r\n                                {truncate(onglet.libelle)}\r\n                            </Button>\r\n                        </div>\r\n                    } />)}\r\n\r\n                <MydModalWithGrid show={modalShow} onHide={() => setModalShow(false)} />\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n    return http.get(\"/supportsInv\");\r\n};\r\n\r\nconst getById = id => {\r\n    return http.get(`/supportsInv/${id}`);\r\n};\r\n\r\nconst getByPropositionId = idProposition => {\r\n    const params = {\r\n        idProposition: idProposition\r\n    }\r\n    return http.post(\"/supportsInv/getByPropositionId/\", { params });\r\n};\r\n\r\n\r\nexport default {\r\n    getAll,\r\n    getById,\r\n    getByPropositionId\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport SupportDataService from '../../services/SupportInvServices'\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst ModalProfil = props => {\r\n\r\n    const useStyles = makeStyles({\r\n        root: {\r\n            minWidth: 275,\r\n            marginBottom: 10,\r\n            // backgroundColor: 'green'\r\n        },\r\n        bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n        },\r\n        title: {\r\n            fontSize: 14,\r\n        },\r\n        pos: {\r\n            marginBottom: 12,\r\n        },\r\n    });\r\n\r\n    const classes = useStyles();\r\n\r\n    const [listeSupports, setListeSupports] = useState([])\r\n    const [allSupports, setAllSupports] = useState([])\r\n\r\n    useEffect(() => {\r\n        getListeSupport()\r\n        getAllSupports()\r\n    }, [])\r\n\r\n    const getListeSupport = () => {\r\n        SupportDataService.getByPropositionId(props.IdPropositionSupport)\r\n            .then(response => {\r\n                setListeSupports(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const getAllSupports = () => {\r\n        SupportDataService.getAll()\r\n            .then(response => {\r\n                setAllSupports(response.data)\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div>\r\n                Vos réponses permettent de déterminer que les supports d'investissement qui vous correspondent sont\r\n        </div>\r\n            {allSupports.map((s, key) => {\r\n                var equals = listeSupports.some(el => el.libelle === s.libelle);\r\n                return (\r\n                    <Card key={key} className={classes.root} style={{ backgroundColor: (equals) ? 'LightGreen' : null }}>\r\n                        <CardContent>\r\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\r\n                                {s.libelle}\r\n                            </Typography>\r\n\r\n                            <Typography variant=\"body2\" component=\"p\">\r\n                                <br />\r\n                                <a href={s.description} target=\"_blank\">Pour plus d'infos, suivez ce lien</a>\r\n\r\n\r\n\r\n                            </Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                )\r\n            })}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ModalProfil;\r\n","import React, { useState } from \"react\";\r\nimport { For } from 'react-loops'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { useSelector } from \"react-redux\";\r\nimport ProfilModal from \"./modals/profil.modal\";\r\nimport GestionModal from \"./modals/gestion.modal\";\r\nimport MarcheModal from \"./modals/marche.modal\";\r\nimport PlusLoinModal from \"./modals/plusLoin.modal\";\r\nimport ReglesModal from \"./modals/regles.modal\";\r\nimport SupportModal from \"./modals/support.modal\";\r\nimport './Profil.css'\r\n\r\nconst Profil = props => {\r\n    const [modalShow, setModalShow] = useState(false);\r\n    const [activeOnglet, setActiveOnglet] = useState();\r\n\r\n    const listeOnglets = [\r\n        'Type de Gestion',\r\n        'Profil risque gain',\r\n        'Support d\\'investissement',\r\n        'Marchés & Produits',\r\n        'Règles d\\'Or',\r\n        'Pour aller plus loin']\r\n\r\n    const nbPointProfil = useSelector((state) => {\r\n        return state.profil.point\r\n    });\r\n    const nbQuestionProfil = useSelector((state) => {\r\n        return state.profil.nbReponses\r\n\r\n    });\r\n    const ResultatProfil = Number((nbPointProfil / nbQuestionProfil).toFixed(0));\r\n\r\n\r\n    const nbPointGestion = useSelector((state) => {\r\n        return state.gestion.point\r\n    });\r\n\r\n    const nbQuestionGestion = useSelector((state) => {\r\n        return state.gestion.nbReponses\r\n    });\r\n\r\n    const ResultatGestion = Number((nbPointGestion / nbQuestionGestion).toFixed(0));\r\n\r\n    const IdPropositionSupport = useSelector((state) => {\r\n        return state.support.propositionSelected\r\n    })\r\n\r\n    const getOnglet = (onglet) => {\r\n        setActiveOnglet(onglet)\r\n    }\r\n\r\n\r\n    const MydModalWithGrid = props => {\r\n        return (\r\n            <Modal {...props}\r\n                dialogClassName=\"modal-bloc\"\r\n                aria-labelledby=\"contained-modal-title-vcenter\"\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                        {activeOnglet ? <p>{activeOnglet}</p> : <p>NADA</p>}\r\n                    </Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    {activeOnglet === \"Type de Gestion\" ? <GestionModal ResultatGestion={ResultatGestion} /> : null}\r\n                    {activeOnglet === \"Profil risque gain\" ? <ProfilModal ResultatProfil={ResultatProfil} /> : null}\r\n                    {activeOnglet === \"Support d'investissement\" ? <SupportModal IdPropositionSupport={IdPropositionSupport} /> : null}\r\n                    {activeOnglet === \"Marchés & Produits\" ? <MarcheModal ResultatProfil={ResultatProfil} /> : null}\r\n                    {activeOnglet === \"Règles d'Or\" ? <ReglesModal ResultatProfil={ResultatProfil} /> : null}\r\n                    {activeOnglet === \"Pour aller plus loin\" ? <PlusLoinModal /> : null}\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button onClick={props.onHide} className=\"btn-close\">Fermer</Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>RESULTATS</h1>\r\n            <>\r\n                <For of={listeOnglets} as={onglet =>\r\n                    <div className=\"resultCard\">\r\n                        <Button className=\"bloc-btn\" onClick={() => {\r\n                            setModalShow(true);\r\n                            getOnglet(onglet)\r\n                        }}>\r\n                            {onglet}\r\n                        </Button>\r\n                    </div>\r\n                } />\r\n                <MydModalWithGrid show={modalShow} onHide={() => setModalShow(false)} />\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profil;","import React, { useState } from \"react\";\r\nimport './Accueil.css'\r\nimport QuestionDataService from \"../services/QuestionService\"\r\nimport Question from \"../components/Question\"\r\nimport Profil from \"../components/Profil\"\r\n\r\nconst Accueil = props => {\r\n\r\n\r\n    const [listQuestions, setListQuestions] = useState();\r\n    const [target, setTarget] = useState(\"accueil\");\r\n\r\n    const getListQuestions = () => {\r\n        QuestionDataService.getAll()\r\n            .then(response => {\r\n                setListQuestions(response.data);\r\n                setTarget(\"questionnaire\")\r\n            })\r\n            .catch(e => {\r\n                console.log(e)\r\n            })\r\n    }\r\n\r\n    const displayProfil = () => {\r\n        setTarget(\"profil\")\r\n    }\r\n\r\n\r\n    if (target === \"profil\") {\r\n        return (\r\n            <Profil />\r\n        )\r\n    }\r\n\r\n    if (target === \"accueil\") {\r\n        return (\r\n            <div className=\"div-accueil\">\r\n                <h1>Déterminez votre profil boursier</h1>\r\n                <span>\r\n                    L'un des critères fondamentaux consiste à déterminer si vous êtes Investisseur, Trader ou les 2.<br />\r\n                    La confusion entre ces deux profils conduit fréquemment à l'échec et à des contre-performances.\r\n                </span>\r\n                <br />\r\n                <span>En répondant le plus naturellement possible à ces questions, vous pourrez déterminer votre profil d'investisseur\r\n                  et savoir ce qui vous correspond le mieux sur les marchés actuels.\r\n            </span> <br /><br />\r\n                <button className=\"btn btn-start\"\r\n                    onClick={getListQuestions}\r\n                >\r\n                    Démarrer le questionnaire\r\n              </button>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (target === \"questionnaire\") {\r\n        return (\r\n            <Question\r\n                listQuestion={listQuestions}\r\n                displayProfil={displayProfil} />\r\n        )\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\n\r\n\r\nexport default Accueil;\r\n","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport Accueil from \"./components/Accueil\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <h1>PROFILER</h1>\r\n        <span>Les clés pour débuter dans la bourse en toute sérénité</span>\r\n      </div>\r\n      <div className=\"main-container\">\r\n        <Accueil />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as types from \"../constants/profilActionTypes\";\r\n\r\nconst initialState = {\r\n    point: 0,\r\n    nbReponses: 0\r\n\r\n}\r\n\r\nexport default function profil(state = initialState, action) {\r\n    switch (action.type) {\r\n        case types.ADD_POINT_PROFIL:\r\n            return {\r\n                ...state,\r\n                point: state.point + action.pointProfil\r\n            }\r\n        case types.ADD_RESPONSE_COUNT:\r\n            return {\r\n                ...state,\r\n                nbReponses: state.nbReponses + 1\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import * as types from \"../constants/profilActionTypes\";\r\n\r\nconst initialState = {\r\n    point: 0,\r\n    nbReponses: 0\r\n\r\n}\r\n\r\nexport default function gestion(state = initialState, action) {\r\n    switch (action.type) {\r\n        case types.ADD_POINT_GESTION:\r\n            return {\r\n                ...state,\r\n                point: state.point + action.pointGestion\r\n            }\r\n        case types.ADD_RESPONSE_GESTION_COUNT:\r\n            return {\r\n                ...state,\r\n                nbReponses: state.nbReponses + 1\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import * as types from \"../constants/profilActionTypes\";\r\n\r\nconst initialState = {\r\n    propositionSelected: 0\r\n\r\n}\r\n\r\nexport default function support(state = initialState, action) {\r\n    switch (action.type) {\r\n        case types.SET_PROPOSITION_SELECTED:\r\n            return {\r\n                ...state,\r\n                propositionSelected: action.propositionId\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}","import { combineReducers } from 'redux';\r\nimport profil from './profilReducer';\r\nimport gestion from './gestionReducer';\r\nimport support from './supportReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    profil,\r\n    gestion,\r\n    support\r\n});\r\n\r\nexport default rootReducer","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux';\nimport reducer from './reducers';\n\nconst store = createStore(reducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}